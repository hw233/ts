-- Script was generated by Devart dbForge Studio for MySQL, Version 6.0.315.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 2015/11/3 星期二 上午 10:39:18
-- Server version: 5.1.73-log
-- Client version: 4.1

-- 
-- Set default database
--
USE `3dgamedata`;

DELIMITER $$

--
-- Definition for procedure addOrUpdateGS
--
DROP PROCEDURE IF EXISTS addOrUpdateGS$$
CREATE PROCEDURE addOrUpdateGS (IN InServerID tinyint UNSIGNED,
IN InServerName varchar(50),
IN InIp char(20),
IN InPort int UNSIGNED,
IN InBeginTime datetime,
IN InMaxPlayer int UNSIGNED)
COMMENT 'gs线路修改或增加'
BEGIN
  REPLACE INTO gsconfig (serverID, serverName, ip, `port`, beginTime, maxPlayer)
  VALUES (
  InServerID,
  InServerName,
  InIp,
  InPort,
  InBeginTime,
  InMaxPlayer
  );
END
$$

--
-- Definition for procedure addRechargeOrder
--
DROP PROCEDURE IF EXISTS addRechargeOrder$$
CREATE PROCEDURE addRechargeOrder (IN InRoleID bigint UNSIGNED, IN InFeOrderID char(50), IN InMoneyType char(16), IN InGameMoney float, IN InCurrencyAmount float, IN InProviderOrderID varchar(255), IN InStatus tinyint)
COMMENT '充值，记录新订单'
BEGIN
  INSERT INTO recharge (roleID, feOrderID, moneyType, currencyAmount, `status`, `addTime`, gameMoneyAmount, otherOrderID)
    VALUES (InRoleID, InFeOrderID, InMoneyType, InCurrencyAmount, InStatus, UNIX_TIMESTAMP(), InGameMoney, InProviderOrderID);
END
$$

--
-- Definition for procedure addUsedActiveCode4Role
--
DROP PROCEDURE IF EXISTS addUsedActiveCode4Role$$
CREATE PROCEDURE addUsedActiveCode4Role (inRoleID bigint UNSIGNED, inActiveCodeID int UNSIGNED)
COMMENT '记录玩家用过的全局性active_code表的自增长id'
BEGIN
  INSERT INTO common_active_code (`role_id`, `awardcode`, `taken_time`)
    VALUES (inRoleID, inActiveCodeID, UNIX_TIMESTAMP());
END
$$

--
-- Definition for procedure changeErrorUID
--
DROP PROCEDURE IF EXISTS changeErrorUID$$
CREATE PROCEDURE changeErrorUID ()
COMMENT '转变错误的UID'
BEGIN

  DECLARE i int UNSIGNED DEFAULT 0;
  DECLARE j int UNSIGNED DEFAULT 0;
  DECLARE str1 varchar(256) DEFAULT '';
  DECLARE str2 varchar(256) DEFAULT '';


  DECLARE YUSHANG bigint UNSIGNED DEFAULT 0xFE007FFFFFFFFFFF;


  DECLARE MinUID bigint UNSIGNED DEFAULT 144255925564211200;


  DECLARE DBID bigint DEFAULT 0;
  SELECT
    di.dbID INTO DBID
  FROM db_info di;
  IF DBID > 127 THEN
    SET DBID = DBID << 47;






    UPDATE achieve
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE awaken_info
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE badge
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE buff
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE common_active_code
    SET role_id = ((role_id & YUSHANG) + DBID);
    UPDATE companion
    SET roleID = ((roleID & YUSHANG) + DBID),
        companionID = ((companionID & YUSHANG) + DBID);
    UPDATE copy_map_data
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE copymapscore
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter0
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter1
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter2
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter3
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter4
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter5
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter6
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter7
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter8
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE daily_counter9
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE equip_base_info
    SET equipUID = ((equipUID & YUSHANG) + DBID);
    UPDATE equip_enhance_info
    SET equipUID = ((equipUID & YUSHANG) + DBID);
    UPDATE equip_ext_info
    SET equipUID = ((equipUID & YUSHANG) + DBID);
    UPDATE equip_refine_info
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE ext_role
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE fashion_slot
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE friend_info
    SET roleID = ((roleID & YUSHANG) + DBID),
        friendRoleID = ((friendRoleID & YUSHANG) + DBID);
    UPDATE god_weapon
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE guard_mirror
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE guard_mirror_rank
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE guild
    SET guildID = ((guildID & YUSHANG) + DBID);
    UPDATE guild_battle
    SET guildID1 = IF(guildID1 > MinUID, ((guildID1 & YUSHANG) + DBID), guildID1),
        guildID2 = IF(guildID2 > MinUID, ((guildID2 & YUSHANG) + DBID), guildID2),
        win_guildID = IF(win_guildID > MinUID, ((win_guildID & YUSHANG) + DBID), win_guildID);
    UPDATE guild_member
    SET roleID = ((roleID & YUSHANG) + DBID),
        guildID = ((guildID & YUSHANG) + DBID);
    UPDATE item
    SET itemUID = ((itemUID & YUSHANG) + DBID),
        roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE item_used_cd
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE ladder_1v1
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE lottery_result
    SET roleID = ((roleID & YUSHANG) + DBID);

    UPDATE mail
    SET mailID = ((mailID & YUSHANG) + DBID),
        senderRoleID = IF(senderRoleID > MinUID, ((senderRoleID & YUSHANG) + DBID), senderRoleID),
        toRoleID = ((toRoleID & YUSHANG) + DBID);
    UPDATE mail_attachment
    SET mailID = ((mailID & YUSHANG) + DBID),
        mvalue = IF(mvalue > MinUID, ((mvalue & YUSHANG) + DBID), mvalue);
    UPDATE malllimitbuy
    SET roleId = ((roleId & YUSHANG) + DBID);
    UPDATE operate_data
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE operate_exchange_data
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE package_info
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE personality_info
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE pet_dungeon_info
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE pet_dungeon_score
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE pet_equip
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE pet_info
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE pet_skill
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE player_clock
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE player_data
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE player_ms_shop
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE player_prop
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE player_rank
    SET roleID = ((roleID & YUSHANG) + DBID);


    TRUNCATE player_team;
    TRUNCATE team;

    UPDATE recharge
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE recharge_rebate_taken
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE role_award_takens
    SET role_id = ((role_id & YUSHANG) + DBID);
    UPDATE role_fashions
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE skill
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE skill_slot
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE sourceshop_forever_limit
    SET roleID = ((roleID & YUSHANG) + DBID);


    DELETE
      FROM sundries
    WHERE id = 3 AND `key` = 3;

    UPDATE talent
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE task_accepted
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE task_submitted
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE title
    SET roleID = ((roleID & YUSHANG) + DBID);
    UPDATE trade
    SET roleID = ((roleID & YUSHANG) + DBID),
        orderID = ((orderID & YUSHANG) + DBID),
        itemUID = ((itemUID & YUSHANG) + DBID),
        destRoleID = IF(destRoleID > MinUID, ((destRoleID & YUSHANG) + DBID), destRoleID),
        relateRoleID = IF(relateRoleID > MinUID, ((relateRoleID & YUSHANG) + DBID), relateRoleID);
    UPDATE uid_info
    SET nowUID = ((nowUID & YUSHANG) + DBID);
    UPDATE variant0
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE variant1
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE variant2
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE variant3
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE variant4
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE variant5
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE variant6
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE variant7
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE variant8
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE variant9
    SET roleID = IF(roleID > MinUID, ((roleID & YUSHANG) + DBID), roleID);
    UPDATE warrior_trial
    SET roleID = ((roleID & YUSHANG) + DBID);


    UPDATE base_role
    SET roleID = ((roleID & YUSHANG) + DBID);



    WHILE i < 10 DO

      SET j = 0;
      WHILE j < 10 DO
        IF i != j THEN
          SET @str1 = CONCAT("INSERT INTO daily_counter", i, " (roleID,dailyType,lastUpdateTime,counter) SELECT * FROM daily_counter", j, " dc WHERE (dc.roleID % 10) = ", i);

          PREPARE stmt1 FROM @str1;
          EXECUTE stmt1;
          DROP PREPARE stmt1;

          SET @str2 = CONCAT("INSERT INTO variant", i, " (roleID,`index`,value) SELECT * FROM variant", j, " v WHERE (v.roleID % 10) = ", i);

          PREPARE stmt2 FROM @str2;
          EXECUTE stmt2;
          DROP PREPARE stmt2;
        END IF;

        SET j = j + 1;
      END WHILE;

      SET i = i + 1;
    END WHILE;


    SET i = 0;
    WHILE i < 10 DO
      SET @str1 = CONCAT("DELETE FROM daily_counter", i, " WHERE (roleID % 10) != ", i);
      PREPARE stmt1 FROM @str1;
      EXECUTE stmt1;
      DROP PREPARE stmt1;

      SET @str2 = CONCAT("DELETE FROM variant", i, " WHERE (roleID % 10) != ", i);
      PREPARE stmt2 FROM @str2;
      EXECUTE stmt2;
      DROP PREPARE stmt2;

      SET i = i + 1;
    END WHILE;
  ELSE
    SELECT
      DBID;
  END IF;
END
$$

--
-- Definition for procedure changeItemOwner
--
DROP PROCEDURE IF EXISTS changeItemOwner$$
CREATE PROCEDURE changeItemOwner (IN InRoleID bigint UNSIGNED, IN InGoodsUID bigint UNSIGNED, IN InOwnerID bigint UNSIGNED)
COMMENT '修改物品的拥有者'
BEGIN
  UPDATE item
  SET roleID = InOwnerID
  WHERE itemUID = InGoodsUID AND roleID = InRoleID;
END
$$

--
-- Definition for procedure changeRechargeOrderStatus
--
DROP PROCEDURE IF EXISTS changeRechargeOrderStatus$$
CREATE PROCEDURE changeRechargeOrderStatus (IN InFeOrderID char(50),
IN InStatus tinyint)
COMMENT '修改订单状态'
BEGIN
  UPDATE recharge
  SET `status` = InStatus
  WHERE feOrderID = InFeOrderID;
END
$$

--
-- Definition for procedure changeRoleOwner
--
DROP PROCEDURE IF EXISTS changeRoleOwner$$
CREATE PROCEDURE changeRoleOwner (IN InDestAccountID bigint UNSIGNED, IN InSourceRoleID bigint UNSIGNED)
BEGIN

  UPDATE base_role
  SET accountID = InDestAccountID
  WHERE roleID = InSourceRoleID;
  SELECT
    roleID
  FROM base_role
  WHERE roleID = InSourceRoleID AND accountID = InDestAccountID;
END
$$

--
-- Definition for procedure clearAccountOnGS
--
DROP PROCEDURE IF EXISTS clearAccountOnGS$$
CREATE PROCEDURE clearAccountOnGS (IN InOnlineServer int)
BEGIN
  UPDATE account
  SET onlineServer = 0
  WHERE onlineServer = InOnlineServer;
END
$$

--
-- Definition for procedure convert2_0To2_2
--
DROP PROCEDURE IF EXISTS convert2_0To2_2$$
CREATE PROCEDURE convert2_0To2_2 (IN AccountDBID smallint)
BEGIN
  DECLARE ModV bigint DEFAULT 0x3FFFFFFF;

  SET @DBID = (SELECT
      dbID
    FROM db_info);
  SET @Prex = (AccountDBID << 46) | (@DBID << 30);

  UPDATE account AS a
  SET a.accountID = @Prex | (a.accountID & ModV);
  UPDATE account_welfare AS aw
  SET aw.accountID = @Prex | (aw.accountID & ModV);
  UPDATE base_role AS br
  SET br.accountID = @Prex | (br.accountID & ModV);
  UPDATE pre_charge_account AS pca
  SET pca.accountID = @Prex | (pca.accountID & ModV);
END
$$

--
-- Definition for procedure CreateAccount
--
DROP PROCEDURE IF EXISTS CreateAccount$$
CREATE PROCEDURE CreateAccount (IN szAccount varchar(255), IN szPlatformAccount varchar(255), IN platformID smallint, IN szNickName varchar(50), IN szAccountID bigint UNSIGNED, OUT OutAccountID bigint UNSIGNED)
COMMENT '插入新账号，成功返回账号ID > 0，有存在账号返回其账号ID，账号ID已经超过最大值返回-1'
BEGIN

  DECLARE MaxCode bigint DEFAULT 0xFFFFFFFF;

  SET @AccountID = (SELECT
      accountID
    FROM account
    WHERE account = szAccount);

  IF ISNULL(@AccountID) THEN
    SET @CODE = (SELECT
        MAX(accountID)
      FROM account);

    IF ISNULL(@CODE) THEN
      SET @CODE = szAccountID;
    ELSE
      SET @CODE = @CODE + 1;
    END IF;

    IF (@CODE & MaxCode) < MaxCode THEN
      INSERT INTO account (accountID, account, platformAccount, platformID, nickName, createTime)
        VALUES (@CODE, szAccount, szPlatformAccount, platformID, szNickName, NOW());
      SET OutAccountID = @CODE;
    ELSE
      SET OutAccountID = - 1;
    END IF;
  ELSE
    SET OutAccountID = @AccountID;
  END IF;
  SELECT
    OutAccountID;
END
$$

--
-- Definition for procedure createAccountWelfareData
--
DROP PROCEDURE IF EXISTS createAccountWelfareData$$
CREATE PROCEDURE createAccountWelfareData ()
COMMENT '根据当前帐号表与角色表来生成测试帐号福利'
BEGIN
  DROP TABLE IF EXISTS tmp_accountHasRole;
  CREATE TEMPORARY TABLE tmp_accountHasRole SELECT
    accountID,
    MAX(level) AS `level`
  FROM base_role
  GROUP BY accountID;
  ALTER TABLE `tmp_accountHasRole` ADD INDEX `NewIndex1` (`accountID`);
  TRUNCATE TABLE account_welfare;
  INSERT INTO account_welfare (accountID, `level`, welfareTypeId)
    SELECT
      a.accountID,
      ta.`level`,
      1
    FROM account AS a
      LEFT JOIN tmp_accountHasRole AS ta
        ON a.accountID = ta.accountID;
  DROP TABLE IF EXISTS tmp_accountHasRole;
END
$$

--
-- Definition for procedure delCopyMapData
--
DROP PROCEDURE IF EXISTS delCopyMapData$$
CREATE PROCEDURE delCopyMapData (IN InRoleID bigint UNSIGNED, IN InCopyMapID int UNSIGNED)
COMMENT '删除某个人的某项副本进度'
BEGIN
  DELETE LOW_PRIORITY
    FROM copy_map_data
  WHERE roleID = InRoleID AND copyMapID = InCopyMapID;
END
$$

--
-- Definition for procedure deleteBuff
--
DROP PROCEDURE IF EXISTS deleteBuff$$
CREATE PROCEDURE deleteBuff (IN InRoleID bigint UNSIGNED)
COMMENT '根据玩家ID删除buff'
BEGIN
  DELETE LOW_PRIORITY
    FROM buff
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure deleteCompanionMember
--
DROP PROCEDURE IF EXISTS deleteCompanionMember$$
CREATE PROCEDURE deleteCompanionMember (IN IncompanionID bigint UNSIGNED, IN InRoleID bigint UNSIGNED)
COMMENT '删除灵魂伙伴成员'
BEGIN
  DELETE
    FROM companion
  WHERE companionID = IncompanionID AND roleID = InRoleID;
END
$$

--
-- Definition for procedure deleteFriend
--
DROP PROCEDURE IF EXISTS deleteFriend$$
CREATE PROCEDURE deleteFriend (IN InRoleID bigint UNSIGNED,
IN InFriendRoleID bigint UNSIGNED,
IN InRelation tinyint UNSIGNED)
COMMENT '删除两人之间关系'
BEGIN
  DELETE LOW_PRIORITY
    FROM friend_info
  WHERE roleID = InRoleID AND friendRoleID = InFriendRoleID AND relation = InRelation;
END
$$

--
-- Definition for procedure deleteGoodsByUID
--
DROP PROCEDURE IF EXISTS deleteGoodsByUID$$
CREATE PROCEDURE deleteGoodsByUID (IN InGoodsUID bigint UNSIGNED)
COMMENT '根据UID删除物品'
BEGIN
  UPDATE LOW_PRIORITY item
  SET deleteTime = NOW(),
      pos = 0
  WHERE itemUID = InGoodsUID;
END
$$

--
-- Definition for procedure deleteGuildData
--
DROP PROCEDURE IF EXISTS deleteGuildData$$
CREATE PROCEDURE deleteGuildData (IN InType tinyint, IN InID bigint UNSIGNED)
COMMENT '删除工会或者删除工会成员'
BEGIN
  IF InType = 1 THEN

    DELETE
      FROM guild_member
    WHERE roleID = InID;
  ELSE

    DELETE
      FROM guild_member
    WHERE guildID = InID;


    DELETE
      FROM guild
    WHERE guildID = InID;
  END IF;
END
$$

--
-- Definition for procedure deleteRole
--
DROP PROCEDURE IF EXISTS deleteRole$$
CREATE PROCEDURE deleteRole (IN InRoleID bigint UNSIGNED)
COMMENT '删除角色'
BEGIN

  UPDATE base_role
  SET deleteTime = NOW()
  WHERE roleID = InRoleID;

  SELECT
    *
  FROM base_role
  WHERE roleID = InRoleID;
  SELECT
    *
  FROM player_coin
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure deleteTeamID
--
DROP PROCEDURE IF EXISTS deleteTeamID$$
CREATE PROCEDURE deleteTeamID (IN inRoleID bigint UNSIGNED, IN inTeamID bigint UNSIGNED)
BEGIN

  DELETE
    FROM player_team
  WHERE roleID = inRoleID AND teamID = inTeamID;
END
$$

--
-- Definition for procedure deleteTeamInfo
--
DROP PROCEDURE IF EXISTS deleteTeamInfo$$
CREATE PROCEDURE deleteTeamInfo (IN inTeamID bigint UNSIGNED)
BEGIN

  DELETE
    FROM team
  WHERE teamID = inTeamID;
END
$$

--
-- Definition for procedure delGuildBattle
--
DROP PROCEDURE IF EXISTS delGuildBattle$$
CREATE PROCEDURE delGuildBattle (IN Inweek tinyint)
COMMENT '删除军团联赛数据'
BEGIN
  DELETE
    FROM guild_battle
  WHERE dayweek = Inweek;
END
$$

--
-- Definition for procedure delMailAttachMent
--
DROP PROCEDURE IF EXISTS delMailAttachMent$$
CREATE PROCEDURE delMailAttachMent (IN InMailID bigint UNSIGNED, IN InMtype tinyint UNSIGNED, IN InMvalue bigint UNSIGNED, IN InMvalue2 bigint UNSIGNED)
COMMENT '删除邮件附件'
BEGIN
  DELETE
    FROM mail_attachment
  WHERE mailID = InMailID AND mtype = InMtype AND mvalue = InMvalue AND mvalue2 = InMvalue2;
END
$$

--
-- Definition for procedure delPlayerClock
--
DROP PROCEDURE IF EXISTS delPlayerClock$$
CREATE PROCEDURE delPlayerClock (IN InRoleID bigint UNSIGNED, IN InClockType bigint UNSIGNED)
COMMENT '玩家计时器回收'
BEGIN
  DELETE LOW_PRIORITY
    FROM player_clock
  WHERE roleID = InRoleID AND clockType = InClockType;
END
$$

--
-- Definition for procedure delPreChargeAccount
--
DROP PROCEDURE IF EXISTS delPreChargeAccount$$
CREATE PROCEDURE delPreChargeAccount (IN InAccountID bigint UNSIGNED)
COMMENT '删除帐号的预充值'
BEGIN
  DELETE
    FROM pre_charge_account
  WHERE accountID = InAccountID;
END
$$

--
-- Definition for procedure delSurplusRankPlayer
--
DROP PROCEDURE IF EXISTS delSurplusRankPlayer$$
CREATE PROCEDURE delSurplusRankPlayer (IN InRankType tinyint UNSIGNED, IN InNumber smallint UNSIGNED)
COMMENT '删除指定排行榜里多余的角色'
BEGIN
  DELETE
    FROM player_rank
  WHERE rankType = InRankType AND rankSort > InNumber;
END
$$

--
-- Definition for procedure getAccountByAccount
--
DROP PROCEDURE IF EXISTS getAccountByAccount$$
CREATE PROCEDURE getAccountByAccount (IN InAccount varchar(32))
BEGIN
  SELECT
    accountID,
    account,
    platformAccount,
    platformID,
    nickName,
    createTime
  FROM account
  WHERE account = InAccount;
END
$$

--
-- Definition for procedure getAccountInfoByPlatformAccountAndPlatformName
--
DROP PROCEDURE IF EXISTS getAccountInfoByPlatformAccountAndPlatformName$$
CREATE PROCEDURE getAccountInfoByPlatformAccountAndPlatformName (IN InPlatformAccountID varchar(255), IN InPlatformName char(50))
COMMENT '检查帐号'
BEGIN

  SELECT
    (a.accountID) AS accountID,
    account,
    platformAccountID,
    platformName,
    priv,
    ipLimit,
    macLimit,
    nickName,
    createTime,
    onlineServer,
    gmLevel
  FROM account AS a
  WHERE platformAccountID = InPlatformAccountID;
END
$$

--
-- Definition for procedure getAchieve
--
DROP PROCEDURE IF EXISTS getAchieve$$
CREATE PROCEDURE getAchieve (IN `InRoleID` bigint UNSIGNED)
BEGIN
  SELECT
    roleID,
    achieveID,
    achieveSID,
    achieveLevel,
    achieveSnum
  FROM achieve
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getActivityData
--
DROP PROCEDURE IF EXISTS getActivityData$$
CREATE PROCEDURE getActivityData ()
BEGIN
  SELECT
    a.id,
    a.starttime,
    a.phasetime,
    a.phase
  FROM activity a;
END
$$

--
-- Definition for procedure getAwakenInfo
--
DROP PROCEDURE IF EXISTS getAwakenInfo$$
CREATE PROCEDURE getAwakenInfo (IN InRoleID bigint UNSIGNED)
BEGIN
  SELECT
    cardID,
    level,
    itemNum
  FROM awaken_info
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getBadge
--
DROP PROCEDURE IF EXISTS getBadge$$
CREATE PROCEDURE getBadge (IN `InRoleID` bigint UNSIGNED)
BEGIN
  SELECT
    roleID,
    mapID,
    items
  FROM badge
  WHERE roleID = InRoleID;

END
$$

--
-- Definition for procedure getBindPhoneNum
--
DROP PROCEDURE IF EXISTS getBindPhoneNum$$
CREATE PROCEDURE getBindPhoneNum (IN InAccountID bigint UNSIGNED)
BEGIN
  SELECT
    accountID,
    bindPhoneNum
  FROM account
  WHERE accountID = InAccountID;
END
$$

--
-- Definition for procedure getBuff
--
DROP PROCEDURE IF EXISTS getBuff$$
CREATE PROCEDURE getBuff (IN InRoleID bigint UNSIGNED)
COMMENT '获取buff信息'
BEGIN
  SELECT
    buffID,
    endTime
  FROM buff
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getCompanionData
--
DROP PROCEDURE IF EXISTS getCompanionData$$
CREATE PROCEDURE getCompanionData (IN InRoleID bigint UNSIGNED)
COMMENT '获取某个人的灵魂伙伴信息'
BEGIN
  SELECT
    c.companionID,
    c.roleID,
    c.cur_lively,
    c.week_lively,
    c.power_lvl,
    c.startTime,
    c.onLineTimeEnough,
    c.styleID,
    br.mapID,
    br.roleName,
    br.level,
    br.career,
    br.lastLoginTime,
    br.lastLogoutTime
  FROM companion c
    LEFT JOIN base_role br
      ON c.roleID = br.roleID
  WHERE c.roleID = InRoleID;
END
$$

--
-- Definition for procedure getCopyMapData
--
DROP PROCEDURE IF EXISTS getCopyMapData$$
CREATE PROCEDURE getCopyMapData ()
COMMENT '查询个人保存的副本进度'
BEGIN
  SELECT
    cmd.roleID,
    cmd.copyMapID,
    cmd.roleLevel,
    cmd.usedTime,
    cmd.playerDeadTimes,
    cmd.curSchedule,
    cmd.curParallelSchedule
  FROM copy_map_data cmd;
END
$$

--
-- Definition for procedure getCopyMapMaxScore
--
DROP PROCEDURE IF EXISTS getCopyMapMaxScore$$
CREATE PROCEDURE getCopyMapMaxScore (IN InRoleID bigint UNSIGNED)
COMMENT '获取副本的最高分数记录'
BEGIN
  SELECT
    c.roleID,
    c.copyMapID,
    c.maxScore
  FROM copymapscore c
  WHERE c.roleID = InRoleID;
END
$$

--
-- Definition for procedure getDailyCounter
--
DROP PROCEDURE IF EXISTS getDailyCounter$$
CREATE PROCEDURE getDailyCounter (IN InRoleID bigint UNSIGNED)
BEGIN
  SET @Table = getDailyCounterTable(InRoleID);
  SET @strSql = CONCAT("SELECT dailyType, lastUpdateTime, counter FROM ", @Table, " WHERE roleID = ", InRoleID);

  PREPARE stmt FROM @strSql;
  EXECUTE stmt;
END
$$

--
-- Definition for procedure getDbID
--
DROP PROCEDURE IF EXISTS getDbID$$
CREATE PROCEDURE getDbID ()
BEGIN
  SELECT
    dbID
  FROM db_info LIMIT 1;
END
$$

--
-- Definition for procedure getEquipPropByUID
--
DROP PROCEDURE IF EXISTS getEquipPropByUID$$
CREATE PROCEDURE getEquipPropByUID (IN InGoodsUID bigint UNSIGNED)
COMMENT '根据装备UID查询装备属性'
BEGIN

  SELECT
    equipUID,
    propKey1,
    propValue1,
    propKey2,
    propValue2,
    propKey3,
    propValue3,
    propKey4,
    propValue4,
    propKey5,
    propValue5,
    skillLevel1,
    skillLevel2
  FROM equip_base_info
  WHERE equipUID = InGoodsUID;


  SELECT
    equipUID,
    propKey1,
    propValue1,
    propRecast1,
    propAffixe1,
    calcType1,
    propKey2,
    propValue2,
    propRecast2,
    propAffixe2,
    calcType2,
    propKey3,
    propValue3,
    propRecast3,
    propAffixe3,
    calcType3,
    propKey4,
    propValue4,
    propRecast4,
    propAffixe4,
    calcType4,
    propKey5,
    propValue5,
    propRecast5,
    propAffixe5,
    calcType5,
    propKey6,
    propValue6,
    propRecast6,
    propAffixe6,
    calcType6
  FROM equip_ext_info
  WHERE equipUID = InGoodsUID;


  SELECT
    equipUID,
    propKey1,
    propValue1,
    propKey2,
    propValue2,
    propKey3,
    propValue3,
    propKey4,
    propValue4,
    propKey5,
    propValue5
  FROM equip_enhance_info
  WHERE equipUID = InGoodsUID;
END
$$

--
-- Definition for procedure getFashion4Role
--
DROP PROCEDURE IF EXISTS getFashion4Role$$
CREATE PROCEDURE getFashion4Role (IN InRoleID bigint UNSIGNED)
BEGIN

  SELECT
    *
  FROM role_fashions
  WHERE roleID = InRoleID;

  SELECT
    fs.roleID,
    fs.slot AS `index`,
    fs.fashionID AS `value`,
    rf.endtime
  FROM fashion_slot fs
    LEFT JOIN role_fashions rf
      ON rf.fashionID = fs.fashionID
  WHERE rf.roleID = fs.roleID AND rf.roleID = InRoleID;
END
$$

--
-- Definition for procedure getFriend
--
DROP PROCEDURE IF EXISTS getFriend$$
CREATE PROCEDURE getFriend (IN InRoleID bigint UNSIGNED)
COMMENT '获取自己的好友信息'
BEGIN
  SELECT
    rb.roleName,
    rb.roleID AS friendID,
    rb.career,
    rb.level,
    fi.relation,
    fi.closeness,
    fi.lastTimeAddLove,
    fi.lastTimeGiveLuckyCoin,
    fi.lastTimeGainLuckyCoin
  FROM friend_info AS fi
    LEFT JOIN base_role AS rb
      ON fi.roleID = InRoleID
  WHERE fi.friendRoleID = rb.roleID;
END
$$

--
-- Definition for procedure getGoodsByUID
--
DROP PROCEDURE IF EXISTS getGoodsByUID$$
CREATE PROCEDURE getGoodsByUID (IN InGoodsUID bigint UNSIGNED)
COMMENT '根据物品UID加载物品'
BEGIN
  SELECT
    roleID,
    itemUID,
    itemID,
    pos,
    pileNum,
    recastCount,
    isBind,
    isLocked,
    quality
  FROM item
  WHERE itemUID = InGoodsUID AND deleteTime = '1970-01-01 00:00:00';
END
$$

--
-- Definition for procedure getGuildBattle
--
DROP PROCEDURE IF EXISTS getGuildBattle$$
CREATE PROCEDURE getGuildBattle ()
COMMENT '获取军团联赛比赛信息'
BEGIN
  SELECT
    gb.dayweek,
    gb.guildID1,
    gb.guildName1,
    gb.guildID2,
    gb.guildName2,
    gb.win_guildID,
    gb.win_time,
    gb.home_id,
    gb.npc_id
  FROM guild_battle gb;
END
$$

--
-- Definition for procedure getGuildData
--
DROP PROCEDURE IF EXISTS getGuildData$$
CREATE PROCEDURE getGuildData ()
COMMENT '查询公会主表所有数据'
BEGIN

  SELECT
    guildID,
    guildName,
    guildLevel,
    member,
    resource,
    exper,
    notice,
    homeid,
    homeLevel,
    createTime,
    maxOnlineNum,
    maxOnlineTime,
    lastGuildCopyOverTime
  FROM guild;
END
$$

--
-- Definition for procedure getGuildMember
--
DROP PROCEDURE IF EXISTS getGuildMember$$
CREATE PROCEDURE getGuildMember (IN InGuildID bigint UNSIGNED)
COMMENT '加载公会玩家数据'
BEGIN

  SELECT
    g.roleID,
    rb.roleName,
    rb.career,
    rb.level,
    g.guildID,
    g.joinTime,
    g.roleGuildLevel,
    g.guildPower,
    g.contribute
  FROM guild_member AS g
    LEFT JOIN base_role rb
      ON g.roleID = rb.roleID
  WHERE g.guildID = InGuildID;
END
$$

--
-- Definition for procedure getInFriend
--
DROP PROCEDURE IF EXISTS getInFriend$$
CREATE PROCEDURE getInFriend (IN InRoleID bigint UNSIGNED)
COMMENT '获取自己在哪些玩家的好友列表中'
BEGIN
  SELECT
    roleID
  FROM friend_info
  WHERE friendRoleID = InRoleID AND relation = 1;
END
$$

--
-- Definition for procedure getMailList
--
DROP PROCEDURE IF EXISTS getMailList$$
CREATE PROCEDURE getMailList (IN InStartNumber int UNSIGNED, IN InCount int UNSIGNED, IN InNowTime datetime)
COMMENT '获取邮件数据'
BEGIN







  DECLARE strSql varchar(400);


  DECLARE strCondition1 varchar(128);
  DECLARE strCondition2 varchar(128);
  SET strCondition1 = CONCAT("(isLocked != 1 AND deleteTime >= '", InNowTime, "') OR ");
  SET strCondition2 = CONCAT("isLocked = 1 OR deleteTime < '2000-01-01 00:00:01' LIMIT ", InStartNumber, ",", InCount);


  SET @strSql = CONCAT("INSERT INTO temp_MailIDTable SELECT mailID FROM mail WHERE ", strCondition1, strCondition2);

  DROP TABLE IF EXISTS temp_MailIDTable;

  CREATE TEMPORARY TABLE temp_MailIDTable (
    mailID bigint(20) NOT NULL PRIMARY KEY
  );

  PREPARE stmt FROM @strSql;
  EXECUTE stmt;


  SELECT
    *
  FROM mail_attachment
  WHERE mailID IN (SELECT
      mailID
    FROM temp_MailIDTable);


  SELECT
    *
  FROM mail
  WHERE mailID IN (SELECT
      mailID
    FROM temp_MailIDTable);


  DEALLOCATE PREPARE stmt;


  DROP TABLE temp_MailIDTable;
END
$$

--
-- Definition for procedure getMailListCount
--
DROP PROCEDURE IF EXISTS getMailListCount$$
CREATE PROCEDURE getMailListCount (IN InNowTime datetime)
COMMENT '查询所有有效邮件的个数'
BEGIN




  SELECT
    COUNT(mailID)
  FROM mail
  WHERE isLocked = 1 OR deleteTime < '2000-01-01 00:00:01' OR (isLocked != 1 AND deleteTime >= InNowTime);
END
$$

--
-- Definition for procedure getMallData
--
DROP PROCEDURE IF EXISTS getMallData$$
CREATE PROCEDURE getMallData ()
BEGIN
  SELECT
    *,
    limitDay AS limit_day
  FROM mall;
END
$$

--
-- Definition for procedure getMallLimitData
--
DROP PROCEDURE IF EXISTS getMallLimitData$$
CREATE PROCEDURE getMallLimitData ()
BEGIN
  SELECT
    dbID,
    itemId AS itemID,
    roleId AS roleID,
    haveBuy,
    time
  FROM malllimitbuy;
END
$$

--
-- Definition for procedure getMaxUID
--
DROP PROCEDURE IF EXISTS getMaxUID$$
CREATE PROCEDURE getMaxUID (IN InuidType tinyint UNSIGNED, IN GameServerID tinyint UNSIGNED, OUT OutCurDBMaxUID bigint UNSIGNED)
COMMENT '获取指定类型当前唯一ID的最大值'
BEGIN
  DECLARE DBIDValue smallint DEFAULT 0;
  DECLARE AccountDBIDValue smallint DEFAULT 0;
  DECLARE NValue bigint DEFAULT 0;
  DECLARE OutMinUID bigint DEFAULT 0;
  DECLARE OutMaxUID bigint DEFAULT 0;

  DECLARE A int DEFAULT 1;
  DECLARE B int DEFAULT 6;




  DECLARE C int DEFAULT 12;
  DECLARE D int DEFAULT 2;
  DECLARE E int DEFAULT 2;
  DECLARE F int DEFAULT 16;
  DECLARE G int DEFAULT 25;

  DECLARE UIDTypeLen int DEFAULT (C + D + E + F + G);
  DECLARE DBIDLen int DEFAULT (D + E + F + G);
  DECLARE GSIDLen int DEFAULT (E + F + G);
  DECLARE IDVerLen int DEFAULT (F + G);
  DECLARE AIDLen int DEFAULT G;


  DECLARE IDVer int DEFAULT 0;


  SELECT
    dbID,
    adbID INTO DBIDValue, AccountDBIDValue
  FROM db_info;

  SELECT
    nowValue INTO NValue
  FROM uid_info
  WHERE uidType = InuidType AND gsID = GameServerID;

  IF NValue = 0 THEN

    SET NValue = 1;
    INSERT INTO uid_info (uidType, gsID, nowValue)
      VALUES (InuidType, GameServerID, NValue);
  END IF;


  SET OutMinUID = InuidType << UIDTypeLen | DBIDValue << DBIDLen | GameServerID << GSIDLen | IDVer << IDVerLen | AccountDBIDValue << AIDLen;
  SET OutCurDBMaxUID = OutMinUID | NValue;
  SET OutMaxUID = OutMinUID | ((1 << G) - 1);

  SELECT
    OutCurDBMaxUID,
    OutMinUID,
    OutMaxUID;
END
$$

--
-- Definition for procedure getPackage
--
DROP PROCEDURE IF EXISTS getPackage$$
CREATE PROCEDURE getPackage (IN InRoleID bigint UNSIGNED)
BEGIN
  DECLARE TargetTime datetime;

  SET TargetTime = DATE_SUB(NOW(), INTERVAL 24 HOUR);

  SELECT
    bagType,
    maxSlot
  FROM package_info
  WHERE roleID = InRoleID;

  SELECT
    itemUID,
    itemID,
    pos,
    pileNum,
    recastCount,
    isBind,
    isLocked,
    quality
  FROM item
  WHERE roleID = InRoleID AND pos <> 0 AND (deleteTime = '1970-01-01 00:00:00' OR deleteTime >= TargetTime);

  SELECT
    equipUID,
    propKey1,
    propValue1,
    propKey2,
    propValue2,
    propKey3,
    propValue3,
    propKey4,
    propValue4,
    propKey5,
    propValue5,
    skillLevel1,
    skillLevel2
  FROM equip_base_info
    LEFT JOIN item i
      ON i.itemUID = equipUID
  WHERE i.roleID = InRoleID AND i.pos <> 0 AND (i.deleteTime = '1970-01-01 00:00:00' OR i.deleteTime >= TargetTime);


  SELECT
    equipUID,
    propKey1,
    propValue1,
    propAffixe1,
    propRecast1,
    calcType1,
    propKey2,
    propValue2,
    propAffixe2,
    propRecast2,
    calcType2,
    propKey3,
    propValue3,
    propAffixe3,
    propRecast3,
    calcType3,
    propKey4,
    propValue4,
    propAffixe4,
    propRecast4,
    calcType4,
    propKey5,
    propValue5,
    propAffixe5,
    propRecast5,
    calcType5,
    propKey6,
    propValue6,
    propAffixe6,
    propRecast6,
    calcType6
  FROM equip_ext_info
    LEFT JOIN item i
      ON i.itemUID = equipUID
  WHERE i.roleID = InRoleID AND i.pos <> 0 AND (i.deleteTime = '1970-01-01 00:00:00' OR i.deleteTime >= TargetTime);


  SELECT
    equipUID,
    propKey1,
    propValue1,
    propKey2,
    propValue2,
    propKey3,
    propValue3,
    propKey4,
    propValue4,
    propKey5,
    propValue5
  FROM equip_enhance_info
    LEFT JOIN item i
      ON i.itemUID = equipUID
  WHERE i.roleID = InRoleID AND i.pos <> 0 AND (i.deleteTime = '1970-01-01 00:00:00' OR i.deleteTime >= TargetTime);


  SELECT
    itemGroupID,
    lastUsedTime
  FROM item_used_cd
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getPersonalityInfo
--
DROP PROCEDURE IF EXISTS getPersonalityInfo$$
CREATE PROCEDURE getPersonalityInfo (IN InRoleID bigint UNSIGNED)
COMMENT '获取自己的个性信息'
BEGIN
  SELECT
    roleID,
    photoData,
    praiseNum,
    birthday,
    starSign,
    location,
    `sign`,
    tags,
    impressions
  FROM personality_info
  WHERE InRoleID = roleID;
END
$$

--
-- Definition for procedure getPet
--
DROP PROCEDURE IF EXISTS getPet$$
CREATE PROCEDURE getPet (IN InRoleID bigint UNSIGNED)
COMMENT '获取宠物信息'
BEGIN
  SELECT
    petID,
    status,
    star,
    name,
    `force`
  FROM pet_info
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getPetEquip
--
DROP PROCEDURE IF EXISTS getPetEquip$$
CREATE PROCEDURE getPetEquip (IN InRoleID bigint UNSIGNED)
COMMENT '获取宠物装备'
BEGIN
  SELECT
    equipPos,
    equipID,
    equipLv
  FROM pet_equip
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getPetSkill
--
DROP PROCEDURE IF EXISTS getPetSkill$$
CREATE PROCEDURE getPetSkill (IN InRoleID bigint UNSIGNED)
COMMENT '获取宠物技能信息'
BEGIN
  SELECT
    petID,
    skillID,
    `index`,
    `level`,
    `unlock`,
    type,
    cd
  FROM pet_skill
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getPlayerClock
--
DROP PROCEDURE IF EXISTS getPlayerClock$$
CREATE PROCEDURE getPlayerClock (IN InRoleID bigint UNSIGNED)
COMMENT '获取玩家的时钟计时数据'
BEGIN
  SELECT
    pc.roleID,
    pc.clockType,
    pc.offTime,
    pc.startTime,
    pc.lastTime,
    pc.lengthTime,
    pc.passTime
  FROM player_clock pc
  WHERE pc.roleID = InRoleID;
END
$$

--
-- Definition for procedure getPlayerProp
--
DROP PROCEDURE IF EXISTS getPlayerProp$$
CREATE PROCEDURE getPlayerProp (IN InRoleID bigint UNSIGNED)
COMMENT '查询指定角色的所有属性'
BEGIN

  SELECT
    pp.roleID,
    pp.propIndex,
    pp.propValue
  FROM player_prop pp
  WHERE pp.roleID = InRoleID;
END
$$

--
-- Definition for procedure getPlayerVisableEquip
--
DROP PROCEDURE IF EXISTS getPlayerVisableEquip$$
CREATE PROCEDURE getPlayerVisableEquip (IN InRoleID bigint UNSIGNED)
BEGIN

  SELECT
    roleID,
    itemID AS equipID,
    quality
  FROM item
  WHERE itemID > 30000 AND pos = 6
  AND roleID = InRoleID;
END
$$

--
-- Definition for procedure getPreChargeAccount
--
DROP PROCEDURE IF EXISTS getPreChargeAccount$$
CREATE PROCEDURE getPreChargeAccount ()
COMMENT '取出预充值过的帐号和金额'
BEGIN
  SELECT
    *
  FROM pre_charge_account;
END
$$

--
-- Definition for procedure getRankData
--
DROP PROCEDURE IF EXISTS getRankData$$
CREATE PROCEDURE getRankData (IN InrankType tinyint UNSIGNED)
COMMENT '获取指定类型的排行榜数据'
BEGIN
  SELECT
    pr.roleID,
    pr.rankType,
    pr.rankSort,
    pr.rankSortC,
    pr.value1,
    pr.value2,
    pr.value3,
    pr.createTime
  FROM player_rank pr
  WHERE pr.rankType = InrankType;
END
$$

--
-- Definition for procedure getRechargeNewAndLast7DaysOrder
--
DROP PROCEDURE IF EXISTS getRechargeNewAndLast7DaysOrder$$
CREATE PROCEDURE getRechargeNewAndLast7DaysOrder ()
COMMENT '载入充值订单'
BEGIN

  SELECT
    *
  FROM recharge;
END
$$

--
-- Definition for procedure getRechargeRebateAndTaken
--
DROP PROCEDURE IF EXISTS getRechargeRebateAndTaken$$
CREATE PROCEDURE getRechargeRebateAndTaken ()
COMMENT '取出充值返利活动的配置表和玩家已经领取过的记录表'
BEGIN
  SELECT
    *
  FROM recharge_rebate;
  SELECT
    *
  FROM recharge_rebate_taken;
END
$$

--
-- Definition for procedure getRefine
--
DROP PROCEDURE IF EXISTS getRefine$$
CREATE PROCEDURE getRefine (IN `InRoleID` bigint UNSIGNED)
BEGIN
  SELECT
    roleID,
    type,
    level
  FROM equip_refine_info
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getRoleBaseData
--
DROP PROCEDURE IF EXISTS getRoleBaseData$$
CREATE PROCEDURE getRoleBaseData (IN InRoleID bigint UNSIGNED, IN InRoleName varchar(32))
BEGIN
  DECLARE str varchar(256);
  DECLARE str_condition varchar(32);
  IF InRoleID > 0 THEN
    SET str_condition = CONCAT("roleID = ", InRoleID);
  ELSE
    SET str_condition = CONCAT("roleName = '", InRoleName, "'");
  END IF;
  SET @str = CONCAT("SELECT
      roleID, 		/*角色ID*/
      accountID, 	/*账号ID*/
      roleName, 	/*角色名*/
      camp, 		/*阵营*/
      career, 		/*职业*/
      level, 		/*等级*/
      mapID, 		/*地图ID*/
      x, 			/*X坐标*/
      y, 			/*Y坐标*/
      oldMapID, 	/*进入副本前的地图ID*/
      oldX, 		/*进入副本前的坐标X*/
      oldY, 		/*进入副本前的坐标Y*/
      exp, 			/*经验*/
      hp, 			/*血量*/
      mp, 			/*魔法值*/
      gold, 		/*金币*/
      bindGold, 	/*绑定金币*/
      diamond, 		/*钻石*/
      bindDiamond, 		/*绑定钻石*/
      prestige, 	/*声望*/
      achieve,    /*成就*/
      reputation,   /*爵位声望*/
      honor, 		/*荣誉*/
      purpleEssence, /*紫色精华*/
      goldenEssence, /*金色精华*/
      scoreCoin,    /*积分货币*/
      predatorCoin,   /*铁血硬币*/
      pkMode,        /*pk状态*/
      denyChatTime,   /*禁言时间*/
      createTime,	/*角色创建时间*/
      lastLoginTime,   /*上次登录时间*/
      lastTransferMapTime /*上次使用小地图传送的时间*/
    FROM base_role
    WHERE ", str_condition, " AND deleteTime = '1970-01-01 00:00:00'");
  PREPARE stmt FROM @str;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Definition for procedure getRoleData4King
--
DROP PROCEDURE IF EXISTS getRoleData4King$$
CREATE PROCEDURE getRoleData4King (IN inRoleID bigint, IN inPropIndex int)
BEGIN
  SELECT
    br.roleID,
    br.roleName,
    br.career,
    br.level,
    br.exp,
    br.hp,
    br.mp,
    br.power,
    pp.propIndex,
    pp.propValue
  FROM base_role br
    LEFT JOIN player_prop pp
      ON br.roleID = pp.roleID
  WHERE br.roleID = inRoleID AND pp.propIndex = inPropIndex;
END
$$

--
-- Definition for procedure getRoleExt
--
DROP PROCEDURE IF EXISTS getRoleExt$$
CREATE PROCEDURE getRoleExt (IN InRoleID bigint UNSIGNED)
COMMENT '获取玩家距离上次离线累计时长'
BEGIN
  SELECT
    roleID,
    totalOfflineTime
  FROM ext_role
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getRoleKeyInfo
--
DROP PROCEDURE IF EXISTS getRoleKeyInfo$$
CREATE PROCEDURE getRoleKeyInfo (IN InStartNumber int UNSIGNED, IN InCount int UNSIGNED)
COMMENT '获取角色的关键数据'
BEGIN


  DECLARE deleteTime varchar(32) DEFAULT '2000-01-01 00:00:01';
  DECLARE str varchar(256);


  SET @str = CONCAT("INSERT INTO temp_RoleIDTable SELECT roleID FROM base_role WHERE deleteTime < '", deleteTime, "' LIMIT ", InStartNumber, ",", InCount);
  DROP TABLE IF EXISTS temp_RoleIDTable;
  CREATE TEMPORARY TABLE temp_RoleIDTable (
    rID bigint(20) NOT NULL PRIMARY KEY
  );

  PREPARE stmt FROM @str;
  EXECUTE stmt;


  SELECT
    roleID,
    roleName,
    accountID,
    career,
    level,
    exp,
    reputation,
    achieve
  FROM base_role
  WHERE roleID IN (SELECT
      rID
    FROM temp_RoleIDTable);

  SELECT
    *
  FROM player_coin
  WHERE roleID IN (SELECT
      rID
    FROM temp_RoleIDTable);

  SELECT
    pp.roleID,
    pp.propIndex,
    pp.propValue
  FROM player_prop pp
  WHERE pp.roleID IN (SELECT
      rID
    FROM temp_RoleIDTable);

  SELECT
    PI.roleID,
    PI.petID,
    PI.star,
    PI.status,
    PI.name,
    PI.`force`
  FROM pet_info PI
  WHERE PI.status > 1 AND PI.roleID IN (SELECT
      rID
    FROM temp_RoleIDTable);

  SELECT
    PI2.roleID,
    PI2.praiseNum
  FROM personality_info PI2
  WHERE PI2.roleID IN (SELECT
      rID
    FROM temp_RoleIDTable);

  SELECT
    PB.roleID,
    PB.save_time,
    PB.pet_integral
  FROM pet_manor_battle PB
  WHERE PB.roleID IN (SELECT
      rID
    FROM temp_RoleIDTable);


  DEALLOCATE PREPARE stmt;


  DROP TABLE temp_RoleIDTable;
END
$$

--
-- Definition for procedure getRoleKeyInfoCount
--
DROP PROCEDURE IF EXISTS getRoleKeyInfoCount$$
CREATE PROCEDURE getRoleKeyInfoCount ()
COMMENT '获取角色的关键数据个数'
BEGIN
  SELECT
    COUNT(roleID)
  FROM base_role
  WHERE deleteTime < '2000-01-01 00:00:01';
END
$$

--
-- Definition for procedure getRoleKeyInfo_Role
--
DROP PROCEDURE IF EXISTS getRoleKeyInfo_Role$$
CREATE PROCEDURE getRoleKeyInfo_Role (IN InRoleID bigint UNSIGNED)
COMMENT '获取指定角色的关键数据'
BEGIN




  SELECT
    roleID,
    roleName,
    accountID,
    career,
    level,
    exp,
    reputation,
    achieve
  FROM base_role
  WHERE roleID = InRoleID AND deleteTime < '2000-01-01 00:00:01';

  SELECT
    *
  FROM player_coin
  WHERE roleID = InRoleID;

  SELECT
    pp.roleID,
    pp.propIndex,
    pp.propValue
  FROM player_prop pp
  WHERE pp.roleID = InRoleID;


  SELECT
    PI.roleID,
    PI.petID,
    PI.star,
    PI.status,
    PI.name,
    PI.`force`
  FROM pet_info PI
  WHERE PI.status > 1 AND PI.roleID = InRoleID;


  SELECT
    PI2.roleID,
    PI2.praiseNum
  FROM personality_info PI2
  WHERE PI2.roleID = InRoleID;


  SELECT
    PB.roleID,
    PB.save_time,
    PB.pet_integral
  FROM pet_manor_battle PB
  WHERE PB.roleID = InRoleID;
END
$$

--
-- Definition for procedure getRoleList
--
DROP PROCEDURE IF EXISTS getRoleList$$
CREATE PROCEDURE getRoleList (IN InAccountID bigint)
BEGIN
  DECLARE GmLvl tinyint DEFAULT 0;
  SELECT
    accountID,
    roleID,
    roleName,
    sex,
    camp,
    career,
    level,
    mapID,
    oldMapID,
    lastLogoutTime
  FROM base_role
  WHERE accountID = InAccountID AND deleteTime = '1970-01-01 00:00:00';

  CREATE TEMPORARY TABLE temp SELECT
    roleID
  FROM base_role
  WHERE accountID = InAccountID AND deleteTime = '1970-01-01 00:00:00';




  CREATE TEMPORARY TABLE VE SELECT
    i.roleID,
    i.itemID AS equipID,
    i.quality
  FROM item i,
       temp t
  WHERE i.roleID = t.roleID AND i.pos = 6 AND i.deleteTime = '1970-1-1' AND i.itemID > 30000;
  SELECT
    *
  FROM VE;

  DROP TEMPORARY TABLE VE;


  SELECT
    gmLevel INTO GmLvl
  FROM account
  WHERE accountID = InAccountID;
  IF GmLvl > 0 THEN
    SELECT
      GmLvl;
  ELSE
    SELECT
      gmLevel
    FROM db_info;
  END IF;

  SELECT
    fs.roleID,
    fs.slot AS `index`,
    fs.fashionID AS `value`,
    rf.endtime AS endTime
  FROM fashion_slot fs
    LEFT JOIN role_fashions rf
      ON rf.fashionID = fs.fashionID
  WHERE rf.roleID = fs.roleID AND rf.roleID IN (SELECT
      roleID
    FROM temp);


  SELECT
    roleID,
    type,
    level
  FROM equip_refine_info
  WHERE roleID IN (SELECT
      roleID
    FROM temp);

  SELECT
    roleID,
    canRename
  FROM ext_role
  WHERE roleID IN (SELECT
      roleID
    FROM temp);

  DROP TEMPORARY TABLE temp;
END
$$

--
-- Definition for procedure getServerList
--
DROP PROCEDURE IF EXISTS getServerList$$
CREATE PROCEDURE getServerList ()
BEGIN
  SELECT
    serverID,
    serverName,
    beginTime,
    `ip`,
    `port`,
    maxPlayer
  FROM gsconfig;
END
$$

--
-- Definition for procedure getSkill
--
DROP PROCEDURE IF EXISTS getSkill$$
CREATE PROCEDURE getSkill (IN InRoleID bigint)
BEGIN
  SELECT
    roleID,
    skillID,
    level,
    lastUseTime
  FROM skill
  WHERE roleID = InRoleID;

  SELECT
    roleID,
    slot,
    skillID
  FROM skill_slot
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getTables
--
DROP PROCEDURE IF EXISTS getTables$$
CREATE PROCEDURE getTables ()
COMMENT '查询数据库表名'
BEGIN
  SHOW TABLE STATUS FROM `3dgamedata`;
END
$$

--
-- Definition for procedure getTablesFieldName
--
DROP PROCEDURE IF EXISTS getTablesFieldName$$
CREATE PROCEDURE getTablesFieldName (IN InTable text)
COMMENT '获取Table字段名'
BEGIN
  SET @des = CONCAT("SHOW FULL COLUMNS FROM ", InTable);
  PREPARE stm FROM @des;
  EXECUTE stm;
  DEALLOCATE PREPARE stm;
END
$$

--
-- Definition for procedure getTalentInfo
--
DROP PROCEDURE IF EXISTS getTalentInfo$$
CREATE PROCEDURE getTalentInfo (IN inRoleID bigint UNSIGNED)
COMMENT '获取天赋信息'
BEGIN
  SELECT
    roleID,
    propIntensify,
    phyDefIntensify,
    magDefIntensify,
    petDamIntensify,
    petDefIntensify
  FROM talent
  WHERE roleID = inRoleID;
END
$$

--
-- Definition for procedure getTaskInfo
--
DROP PROCEDURE IF EXISTS getTaskInfo$$
CREATE PROCEDURE getTaskInfo (IN InRoleID bigint UNSIGNED)
BEGIN
  SELECT
    taskSlot,
    taskFlag
  FROM task_submitted
  WHERE roleID = InRoleID;
  SELECT
    taskID,
    roleID,
    subType1,
    count1,
    subType2,
    count2,
    subType3,
    count3
  FROM task_accepted
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getTeamID
--
DROP PROCEDURE IF EXISTS getTeamID$$
CREATE PROCEDURE getTeamID (IN inRoleID bigint UNSIGNED)
BEGIN
  SELECT
    teamID
  FROM player_team
  WHERE roleID = inRoleID;
END
$$

--
-- Definition for procedure getTeamInfo
--
DROP PROCEDURE IF EXISTS getTeamInfo$$
CREATE PROCEDURE getTeamInfo ()
BEGIN

  SELECT
    teamID,
    `type`,
    leaderID,
    members,
    customProp
  FROM team;
END
$$

--
-- Definition for procedure getTeamInfoByID
--
DROP PROCEDURE IF EXISTS getTeamInfoByID$$
CREATE PROCEDURE getTeamInfoByID (IN inTeamID bigint UNSIGNED)
BEGIN

  SELECT
    teamID,
    `type`,
    leaderID,
    members,
    customProp
  FROM team
  WHERE teamID = inTeamID;
END
$$

--
-- Definition for procedure getTitleInfo
--
DROP PROCEDURE IF EXISTS getTitleInfo$$
CREATE PROCEDURE getTitleInfo (IN InRoleID bigint UNSIGNED)
COMMENT '获取称号及槽位装配信息'
BEGIN
  SELECT
    titleID
  FROM title
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure getTradeData
--
DROP PROCEDURE IF EXISTS getTradeData$$
CREATE PROCEDURE getTradeData (IN InType int, IN InStartNumber int, IN InCount int)
COMMENT '获取交易行数据'
BEGIN





  DECLARE str varchar(400);
  DECLARE str_select varchar(256);
  SET str_select = 'SELECT T.orderID,T.itemUID,T.roleID,T.sellType,T.putTime,T.downTime,T.silver,T.gold,T.destRoleID,T.sellState,T.relateRoleID,I.itemID,I.quality,I.pileNum
    AS pileNumber FROM `trade` AS T INNER JOIN `item` AS I ON I.itemUID = T.itemUID ';


  IF 0 = InType THEN
    SET @str = CONCAT(str_select, 'WHERE T.sellState != 3 ORDER BY T.putTime LIMIT ', InStartNumber, ' ,', InCount);
  ELSE
    SET @str = CONCAT(str_select, 'WHERE T.sellType = ', InType, ' AND T.sellState != 3 ORDER BY T.putTime LIMIT ', InStartNumber, ' ,', InCount);
  END IF;
  PREPARE stmt FROM @str;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Definition for procedure getTradeDataCount
--
DROP PROCEDURE IF EXISTS getTradeDataCount$$
CREATE PROCEDURE getTradeDataCount (IN InType int)
COMMENT '获取交易行数据行数'
BEGIN
  IF 0 = InType THEN
    SELECT
      COUNT(itemUID) AS tradecount
    FROM `trade`
    WHERE sellState != 3;
  ELSE
    SELECT
      COUNT(itemUID) AS tradecount
    FROM `trade`
    WHERE sellType = InType AND sellState != 3;
  END IF;
END
$$

--
-- Definition for procedure getUsedActiveCode4Role
--
DROP PROCEDURE IF EXISTS getUsedActiveCode4Role$$
CREATE PROCEDURE getUsedActiveCode4Role (inRoleID bigint UNSIGNED)
COMMENT '取出玩家领过的礼包码id  active_code表自增长id'
BEGIN
  SELECT
    awardcode AS id
  FROM common_active_code
  WHERE role_id = inRoleID;
END
$$

--
-- Definition for procedure getVariant
--
DROP PROCEDURE IF EXISTS getVariant$$
CREATE PROCEDURE getVariant (IN InRoleID bigint UNSIGNED)
COMMENT '获取玩家设置数据'
BEGIN
  SET @Table = getVariantTable(InRoleID);
  SET @strSql = CONCAT("SELECT roleID, `index`, value FROM ", @Table, " WHERE roleID = ", InRoleID);

  PREPARE stmt FROM @strSql;
  EXECUTE stmt;
END
$$

--
-- Definition for procedure getVarValue
--
DROP PROCEDURE IF EXISTS getVarValue$$
CREATE PROCEDURE getVarValue (IN InVariant bigint UNSIGNED)
COMMENT '根据宏值，计算开关值'
BEGIN

  SET @TABLE1 = getVariantTable(10);
  SET @strSql = CONCAT("SELECT SUBSTR(BIN(`value`), LENGTH(BIN(`value`)) - (", InVariant, " - (`index` * 32)), 1) as flag FROM ", @TABLE1, " WHERE `index` =", FLOOR(InVariant / 32));

  PREPARE stmt FROM @strSql;
  EXECUTE stmt;

END
$$

--
-- Definition for procedure getWelfare
--
DROP PROCEDURE IF EXISTS getWelfare$$
CREATE PROCEDURE getWelfare (IN InAccountID bigint UNSIGNED,
IN InWelfareTypeID smallint)
COMMENT '把帐号福利取出，且清除'
BEGIN
  DECLARE retItemList text DEFAULT "";

  SELECT
    ItemList INTO retItemList
  FROM account_welfare
  WHERE accountID = InAccountID AND welfareTypeId = InWelfareTypeID;

  DELETE
    FROM account_welfare
  WHERE accountID = InAccountID AND welfareTypeId = InWelfareTypeID;

  IF (ROW_COUNT() < 1) THEN
    SET retItemList = "";
  END IF;

  SELECT
    retItemList;
END
$$

--
-- Definition for procedure insertAccount
--
DROP PROCEDURE IF EXISTS insertAccount$$
CREATE PROCEDURE insertAccount (IN InAccountId bigint UNSIGNED, IN InPlatformAccountID varchar(255), IN InPlatformName char(50), IN InFgi int UNSIGNED, IN InNickName varchar(32))
COMMENT '插入新账号，成功返回账号信息'
BEGIN
  SET @NewPlatformName = getRealPlatfromName(InPlatformName);
  SET @NewPlatformName2 = CONCAT(@NewPlatformName, '_');
  SET @NewAccount = CONCAT(@NewPlatformName2, InPlatformAccountID);
  INSERT INTO account SET
  accountID = InAccountId,
  account = @NewAccount,
  platformAccountID = InPlatformAccountID,
  platformName = @NewPlatformName,
  fgi = InFgi,
  createTime = NOW(),
  nickName = InNickName;
  CALL getAccountInfoByPlatformAccountAndPlatformName(InPlatformAccountID, InPlatformName);
END
$$

--
-- Definition for procedure insertRole
--
DROP PROCEDURE IF EXISTS insertRole$$
CREATE PROCEDURE insertRole (IN AccountID bigint UNSIGNED, IN szRoleName char(32), IN InNowStr datetime, IN GameServerID tinyint UNSIGNED, IN Camp tinyint UNSIGNED, IN Career tinyint UNSIGNED, IN Sex boolean, IN PName char(50), OUT OutRoleID bigint UNSIGNED)
COMMENT '插入新角色，成功返回角色ID > 0，有存在的角色返回0，角色ID已经超过最大值返回-1'
BEGIN

  DECLARE OutMaxUID bigint DEFAULT 0;


  SET OutRoleID = 0;
  IF (LENGTH(szRoleName) > 1) THEN

    SET @Count = (SELECT
        IFNULL(COUNT(roleID), 0)
      FROM base_role
      WHERE roleName = szRoleName);


    IF (0 = @Count) THEN

      CALL getMaxUID(1, GameServerID, @OutMaxUID);


      SET @OutMaxUID = @OutMaxUID + 1;


      INSERT INTO base_role (AccountID, createTime, roleID, roleName, Camp, Career, level, Sex, platformName)
        VALUES (AccountID, InNowStr, @OutMaxUID, szRoleName, Camp, Career, 1, Sex, PName);


      SET OutRoleID = @OutMaxUID;
    ELSE

      SET OutRoleID = 0;
      SELECT
        OutRoleID;
    END IF;
  ELSE
    SET OutRoleID = 0;
    SELECT
      OutRoleID;
  END IF;

  SELECT
    OutRoleID;
END
$$

--
-- Definition for procedure loadRoleAwardTakensAwardID
--
DROP PROCEDURE IF EXISTS loadRoleAwardTakensAwardID$$
CREATE PROCEDURE loadRoleAwardTakensAwardID (IN inRoleID bigint UNSIGNED)
COMMENT '根据角色ID取出参与了的活动ID'
BEGIN
  SELECT
    rat.award_id
  FROM role_award_takens rat
  WHERE rat.role_id = inRoleID;
END
$$

--
-- Definition for procedure loadRoleAwardTakensRoleID
--
DROP PROCEDURE IF EXISTS loadRoleAwardTakensRoleID$$
CREATE PROCEDURE loadRoleAwardTakensRoleID ()
COMMENT '取出参与了有效活动的角色ID'
BEGIN
  SELECT
    rat.role_id
  FROM role_award_takens rat
  WHERE rat.award_id IN (SELECT
      lac.award_id
    FROM login_award_conf lac
    WHERE UNIX_TIMESTAMP() <= lac.time_end
    AND lac.is_valid = 0)
  GROUP BY rat.role_id;
END
$$

--
-- Definition for procedure loginAwardConfAdd
--
DROP PROCEDURE IF EXISTS loginAwardConfAdd$$
CREATE PROCEDURE loginAwardConfAdd (IN award_name varchar(255), IN time_begin int, IN time_end int, IN level_min int, IN level_max int, IN mail_title varchar(255), IN mail_content text, IN items text)
COMMENT '新增登录活动配置'
BEGIN

  INSERT login_award_conf (award_name, time_begin, time_end, level_min, level_max, mail_title, mail_content, items)
    VALUES (award_name, time_begin, time_end, level_min, level_max, mail_title, mail_content, items);


END
$$

--
-- Definition for procedure loginAwardConfDel
--
DROP PROCEDURE IF EXISTS loginAwardConfDel$$
CREATE PROCEDURE loginAwardConfDel (IN inAward_id int)
COMMENT '删除活动配置'
BEGIN
  UPDATE login_award_conf
  SET is_valid = 1
  WHERE award_id = inAward_id;
END
$$

--
-- Definition for procedure loginAwardConfSelect
--
DROP PROCEDURE IF EXISTS loginAwardConfSelect$$
CREATE PROCEDURE loginAwardConfSelect ()
COMMENT '取出有效的活动配置'
BEGIN
  SELECT
    *
  FROM login_award_conf lac
  WHERE UNIX_TIMESTAMP() <= lac.time_end
  AND lac.is_valid = 0;
END
$$

--
-- Definition for procedure newMail
--
DROP PROCEDURE IF EXISTS newMail$$
CREATE PROCEDURE newMail (IN InMailID bigint UNSIGNED, IN InMailSendTime datetime, IN InSendRoleID bigint UNSIGNED,
IN InToRoleID bigint UNSIGNED, IN InMailTitle varchar(128), IN InMailContent text, IN InMailSubjoinMsg varchar(128), IN InDeleteTime datetime, OUT OutRet int)
COMMENT '新邮件'
BEGIN
  IF EXISTS (SELECT
        mailID
      FROM mail
      WHERE mailID = InMailID) THEN

    SET OutRet = 0;
  ELSE

    INSERT INTO mail (mailID, mailSendTime, senderRoleID, toRoleID, mailTitle, mailContent, mailSubjoinMsg, deleteTime)
      VALUES (InMailID, InMailSendTime, InSendRoleID, InToRoleID, InMailTitle, InMailContent, InMailSubjoinMsg, InDeleteTime);


    IF EXISTS (SELECT
          mailID
        FROM mail
        WHERE mailID = InMailID) THEN
      SET OutRet = 1;
    ELSE
      SET OutRet = 0;
    END IF;
  END IF;

  SELECT
    OutRet;
END
$$

--
-- Definition for procedure newMailAttachment
--
DROP PROCEDURE IF EXISTS newMailAttachment$$
CREATE PROCEDURE newMailAttachment (IN InMailID bigint UNSIGNED, IN InMtype tinyint UNSIGNED, IN InMvalue bigint UNSIGNED, IN InMvalue2 bigint UNSIGNED)
COMMENT '新邮件附件'
BEGIN
  INSERT INTO mail_attachment (mailID, mtype, mvalue, mvalue2)
    VALUES (InMailID, InMtype, InMvalue, InMvalue2);
END
$$

--
-- Definition for procedure noticeAdd
--
DROP PROCEDURE IF EXISTS noticeAdd$$
CREATE PROCEDURE noticeAdd (IN inPosition int,
IN inType smallint,
IN inContent text,
IN inRgb int,
IN inBeginTime int,
IN inDuration bigint,
IN inInterval int)
COMMENT '添加公告'
BEGIN
  INSERT INTO game_notice SET
  `position` = inPosition, `type` = inType, `content` = inContent, rgb = inRgb, beginTime = inBeginTime,
  duration = inDuration, `interval` = inInterval;
  SELECT
    LAST_INSERT_ID() AS id;
END
$$

--
-- Definition for procedure noticeDel
--
DROP PROCEDURE IF EXISTS noticeDel$$
CREATE PROCEDURE noticeDel (IN inId int)
COMMENT '删除公告'
BEGIN
  DELETE
    FROM game_notice
  WHERE id = inId;
END
$$

--
-- Definition for procedure noticeSelect
--
DROP PROCEDURE IF EXISTS noticeSelect$$
CREATE PROCEDURE noticeSelect ()
COMMENT '取出公告列表'
BEGIN
  SELECT
    id,
    `position`,
    `type`,
    content,
    rgb,
    beginTime AS beginTime,
    duration,
    `interval`
  FROM game_notice
  WHERE `type` <> 0 AND beginTime >= UNIX_TIMESTAMP() - duration
  ORDER BY id DESC;

END
$$

--
-- Definition for procedure preChargeDeal
--
DROP PROCEDURE IF EXISTS preChargeDeal$$
CREATE PROCEDURE preChargeDeal ()
COMMENT '将预充值期间的订单分类汇总到帐号，且更新记录到pre_charge_account表中，需要  【建、删除表和索引】 权限'
BEGIN
  DROP TABLE IF EXISTS tmp_charge;
  CREATE TEMPORARY TABLE tmp_charge SELECT
    roleID,
    SUM(currencyAmount) AS amount
  FROM recharge
  GROUP BY roleID;
  ALTER TABLE `tmp_charge` ADD INDEX `NewIndex1` (`roleID`);

  DROP TABLE IF EXISTS pre_charge_account;
  CREATE TABLE pre_charge_account SELECT
    b.accountID,
    SUM(a.amount) AS amount
  FROM tmp_charge AS a
    LEFT JOIN base_role AS b
      ON a.roleID = b.roleID
  GROUP BY b.accountID;
  ALTER TABLE `pre_charge_account` ADD INDEX `NewIndex1` (`accountID`);
END
$$

--
-- Definition for procedure queryRepeatRank
--
DROP PROCEDURE IF EXISTS queryRepeatRank$$
CREATE PROCEDURE queryRepeatRank ()
COMMENT '查询重复的排行榜数据'
BEGIN
  CREATE TEMPORARY TABLE temp_RoleIDTable (SELECT
      pr.roleID,
      pr.rankType
    FROM player_rank pr
    GROUP BY pr.roleID,
             pr.rankType
    HAVING COUNT(pr.roleID) > 1);
  SELECT
    pr.*
  FROM temp_RoleIDTable tri,
       player_rank pr
  WHERE pr.roleID = tri.roleID AND pr.rankType = tri.rankType;
  DROP TABLE temp_RoleIDTable;
END
$$

--
-- Definition for procedure removeAllRole
--
DROP PROCEDURE IF EXISTS removeAllRole$$
CREATE PROCEDURE removeAllRole ()
BEGIN
  TRUNCATE copy_map_data;
  TRUNCATE activity;
  TRUNCATE player_rank;
  TRUNCATE login_award_conf;
  TRUNCATE role_award_takens;
  TRUNCATE common_active_code;
  TRUNCATE item;
  TRUNCATE equip_base_info;
  TRUNCATE equip_enhance_info;
  TRUNCATE equip_ext_info;
  TRUNCATE equip_refine_info;
  TRUNCATE package_info;
  TRUNCATE skill;
  TRUNCATE skill_slot;
  TRUNCATE task_accepted;
  TRUNCATE task_submitted;
  TRUNCATE mail;
  TRUNCATE friend_info;
  TRUNCATE account;
  TRUNCATE trade;
  TRUNCATE guild;
  TRUNCATE guild_member;
  TRUNCATE mail_attachment;
  TRUNCATE mail;
  TRUNCATE item_used_cd;
  TRUNCATE player_prop;
  TRUNCATE companion;
  TRUNCATE player_clock;
  TRUNCATE role_fashions;
  TRUNCATE fashion_slot;
  TRUNCATE recharge;
  TRUNCATE personality_info;
  TRUNCATE ladder_1v1;
  TRUNCATE base_role;
  TRUNCATE guard_mirror;
  TRUNCATE guard_mirror_rank;


  SET @i = 0;
  WHILE (@i <= 9) DO

    SET @VarTable = getVariantTable(@i);
    SET @strVarSQL = CONCAT("Delete from ", @VarTable, " WHERE roleID > 10000");
    PREPARE varStmt FROM @strVarSQL;
    EXECUTE varStmt;
    DEALLOCATE PREPARE varStmt;

    SET @DailyCounterTable = getDailyCounterTable(@i);
    SET @strDCTSQL = CONCAT("TRUNCATE ", @DailyCounterTable);
    PREPARE DCTStmt FROM @strDCTSQL;
    EXECUTE DCTStmt;
    DEALLOCATE PREPARE DCTStmt;

    SET @i = @i + 1;

  END WHILE;
END
$$

--
-- Definition for procedure returnRole
--
DROP PROCEDURE IF EXISTS returnRole$$
CREATE PROCEDURE returnRole (IN InRoleID bigint)
COMMENT '还原角色信息'
BEGIN
  UPDATE base_role
  SET deleteTime = '1970-01-01 00:00:00'
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure saveAcceptedTask
--
DROP PROCEDURE IF EXISTS saveAcceptedTask$$
CREATE PROCEDURE saveAcceptedTask (IN InTaskID int UNSIGNED, IN inRoleID bigint UNSIGNED, IN InSubType1 tinyint UNSIGNED, IN InCount1 tinyint UNSIGNED,
IN InSubType2 tinyint UNSIGNED, IN InCount2 tinyint UNSIGNED, IN InSubType3 tinyint UNSIGNED, IN InCount3 tinyint UNSIGNED)
BEGIN
  IF EXISTS (SELECT
        taskID
      FROM task_accepted
      WHERE roleID = inRoleID AND taskID = InTaskID) THEN

    UPDATE LOW_PRIORITY task_accepted
    SET subType1 = InSubType1,
        count1 = InCount1,
        subType2 = InSubType2,
        count2 = InCount2,
        subType3 = InSubType3,
        count3 = InCount3
    WHERE roleID = inRoleID AND taskID = InTaskID;

  ELSE

    INSERT DELAYED INTO task_accepted (taskID, roleID, subType1, count1, subType2, count2, subType3, count3)
      VALUES (InTaskID, inRoleID, InSubType1, InCount1, InSubType2, InCount2, InSubType3, InCount3);

  END IF;
END
$$

--
-- Definition for procedure saveAchieve
--
DROP PROCEDURE IF EXISTS saveAchieve$$
CREATE PROCEDURE saveAchieve (IN `inRoleID` bigint UNSIGNED, IN `InAchieveID` smallint UNSIGNED, IN `InAchieveSID` tinyint UNSIGNED, IN `InAchieveLevel` tinyint UNSIGNED, IN `InAchieveSnum` int UNSIGNED)
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM achieve
      WHERE roleID = inRoleID AND achieveID = InAchieveID) THEN
    UPDATE LOW_PRIORITY achieve
    SET achieveSID = InAchieveSID,
        achieveLevel = InAchieveLevel,
        achieveSnum = InAchieveSnum
    WHERE roleID = inRoleID AND achieveID = InAchieveID;
  ELSE
    INSERT DELAYED INTO achieve (roleID, achieveID, achieveSID, achieveLevel, achieveSnum)
      VALUES (inRoleID, InAchieveID, InAchieveSID, InAchieveLevel, InAchieveSnum);
  END IF;
END
$$

--
-- Definition for procedure saveActivityData
--
DROP PROCEDURE IF EXISTS saveActivityData$$
CREATE PROCEDURE saveActivityData (IN Inid int, IN Instarttime datetime, IN Inphasetime datetime, IN Inphase tinyint)
BEGIN
  DECLARE RID bigint DEFAULT 0;
  SELECT
    a.id INTO RID
  FROM activity a
  WHERE a.id = Inid;
  IF RID > 0 THEN

    UPDATE LOW_PRIORITY activity a
    SET a.starttime = Instarttime,
        a.phasetime = Inphasetime,
        a.phase = Inphase
    WHERE a.id = Inid;
  ELSE

    INSERT DELAYED INTO activity (id, starttime, phasetime, phase)
      VALUES (Inid, Instarttime, Inphasetime, Inphase);
  END IF;
END
$$

--
-- Definition for procedure saveAwaken
--
DROP PROCEDURE IF EXISTS saveAwaken$$
CREATE PROCEDURE saveAwaken (IN InRoleID bigint UNSIGNED, IN InCardID int UNSIGNED,
IN InLevel int UNSIGNED,
IN InItemNum int UNSIGNED)
BEGIN
  IF EXISTS (SELECT
        *
      FROM awaken_info
      WHERE roleID = InRoleID AND cardID = InCardID) THEN
    UPDATE LOW_PRIORITY awaken_info
    SET level = InLevel,
        itemNum = InItemNum
    WHERE roleID = InRoleID AND cardID = InCardID;
  ELSE
    INSERT DELAYED INTO awaken_info (roleID, cardID, level, itemNum)
      VALUES (InRoleID, InCardID, InLevel, InItemNum);
  END IF;
END
$$

--
-- Definition for procedure saveBadge
--
DROP PROCEDURE IF EXISTS saveBadge$$
CREATE PROCEDURE saveBadge (IN InRoleID bigint UNSIGNED, IN InMapID smallint UNSIGNED, IN InItems varchar(128))
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM badge
      WHERE roleID = InRoleID AND mapID = InMapID) THEN

    UPDATE LOW_PRIORITY badge
    SET items = InItems
    WHERE roleID = InRoleID AND mapID = InMapID;

  ELSE

    INSERT DELAYED INTO badge (roleID, mapID, items)
      VALUES (InRoleID, InMapID, InItems);
  END IF;

END
$$

--
-- Definition for procedure saveBuff
--
DROP PROCEDURE IF EXISTS saveBuff$$
CREATE PROCEDURE saveBuff (IN InRoleID bigint UNSIGNED, IN InBuffID int UNSIGNED, IN InEndTime bigint)
COMMENT '保存buff信息'
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM buff
      WHERE roleID = InRoleID AND buffID = InBuffID) THEN
    UPDATE LOW_PRIORITY buff
    SET endTime = InEndTime
    WHERE roleID = InRoleID AND buffID = InBuffID;
  ELSE
    INSERT DELAYED INTO buff (roleID, buffID, endTime)
      VALUES (InRoleID, InBuffID, InEndTime);
  END IF;
END
$$

--
-- Definition for procedure saveCoin
--
DROP PROCEDURE IF EXISTS saveCoin$$
CREATE PROCEDURE saveCoin (IN InRoleID bigint, IN InGold int, IN InBindGold int, IN InDiamond int, IN InBindDiamond int, IN InPrestige int, IN InHonor int, IN InPurpleEssence int, IN InGoldenEssence int, IN inScore int)
BEGIN
  UPDATE LOW_PRIORITY base_role
  SET gold = InGold,
      bindGold = InBindGold,
      diamond = InDiamond,
      bindDiamond = InBindDiamond,
      prestige = InPrestige,
      honor = InHonor,
      purpleEssence = InPurpleEssence,
      goldenEssence = InGoldenEssence,
      scoreCoin = inScore
  WHERE roleID = InRoleID AND deleteTime = '1970-01-01 00:00:00';
END
$$

--
-- Definition for procedure saveCompanionData
--
DROP PROCEDURE IF EXISTS saveCompanionData$$
CREATE PROCEDURE saveCompanionData (IN IncompanionID bigint UNSIGNED, IN InroleID bigint UNSIGNED, IN Incur_lively int, IN Inweek_lively int, IN Inpower_lvl tinyint, IN InstartTime datetime, IN inOonlineTimeEnough int UNSIGNED, IN inPoseID smallint UNSIGNED)
COMMENT '保存灵魂伙伴团队信息'
BEGIN
  DECLARE RID bigint DEFAULT 0;
  SELECT
    c.roleID INTO RID
  FROM companion c
  WHERE c.companionID = IncompanionID AND c.roleID = InroleID;
  IF RID > 0 THEN

    UPDATE companion c
    SET c.cur_lively = Incur_lively,
        c.week_lively = Inweek_lively,
        c.power_lvl = Inpower_lvl,
        c.startTime = InstartTime,
        c.onLineTimeEnough = inOonlineTimeEnough,
        c.styleID = inPoseID
    WHERE c.companionID = IncompanionID AND c.roleID = InroleID;
  ELSE

    INSERT INTO companion (companionID, roleID, cur_lively, week_lively, power_lvl, startTime, joinTime, onLineTimeEnough, styleID)
      VALUES (IncompanionID, InroleID, Incur_lively, Inweek_lively, Inpower_lvl, InstartTime, NOW(), inOonlineTimeEnough, inPoseID);
  END IF;
END
$$

--
-- Definition for procedure saveCopyMapData
--
DROP PROCEDURE IF EXISTS saveCopyMapData$$
CREATE PROCEDURE saveCopyMapData (IN InOldRoleID bigint UNSIGNED, IN InOldCopyMapID int UNSIGNED, IN InroleID bigint UNSIGNED, IN IncopyMapID int UNSIGNED, IN InroleLevel tinyint, IN InusedTime int, IN InplayerDeadTimes int, IN IncurSchedule int, IN IncurParallelSchedule int)
COMMENT '保存副本进度数据'
BEGIN
  DECLARE RID bigint DEFAULT 0;
  SELECT
    cmd.roleID INTO RID
  FROM copy_map_data cmd
  WHERE cmd.roleID = InOldRoleID AND cmd.copyMapID = InOldcopyMapID;
  IF RID > 0 THEN

    UPDATE LOW_PRIORITY copy_map_data cmd
    SET cmd.roleID = InroleID,
        cmd.copyMapID = IncopyMapID,
        cmd.roleLevel = InroleLevel,
        cmd.usedTime = InusedTime,
        cmd.playerDeadTimes = InplayerDeadTimes,
        cmd.curSchedule = IncurSchedule,
        cmd.curParallelSchedule = IncurParallelSchedule
    WHERE cmd.roleID = InOldRoleID AND cmd.copyMapID = InOldcopyMapID;
  ELSE

    INSERT DELAYED INTO copy_map_data (roleID, copyMapID, roleLevel, usedTime, playerDeadTimes, curSchedule, curParallelSchedule)
      VALUES (InroleID, IncopyMapID, InroleLevel, InusedTime, InplayerDeadTimes, IncurSchedule, IncurParallelSchedule);
  END IF;
END
$$

--
-- Definition for procedure saveCopyMapMaxScore
--
DROP PROCEDURE IF EXISTS saveCopyMapMaxScore$$
CREATE PROCEDURE saveCopyMapMaxScore (IN InRoleID bigint UNSIGNED, IN InCopyMapID smallint UNSIGNED, IN InScore int UNSIGNED)
COMMENT '保存副本的最高分数'
BEGIN
  DECLARE OldMaxScore int DEFAULT 0;
  DECLARE OldCopyMapID smallint DEFAULT 0;


  SELECT
    c.copyMapID,
    c.maxScore INTO OldCopyMapID, OldMaxScore
  FROM copymapscore c
  WHERE c.roleID = InRoleID AND c.copyMapID = InCopyMapID;

  IF OldCopyMapID > 0 THEN

    IF OldMaxScore > InScore THEN

      UPDATE LOW_PRIORITY copymapscore c
      SET c.maxScore = InScore
      WHERE c.roleID = InRoleID AND c.copyMapID = InCopyMapID;
    END IF;
  ELSE

    INSERT DELAYED INTO copymapscore (roleID, copyMapID, maxScore)
      VALUES (InRoleID, InCopyMapID, InScore);
  END IF;
END
$$

--
-- Definition for procedure saveDailyCounter
--
DROP PROCEDURE IF EXISTS saveDailyCounter$$
CREATE PROCEDURE saveDailyCounter (IN inRoleID bigint UNSIGNED, IN InDailyType bigint UNSIGNED, IN InlastUpdateTime bigint, IN InCounter smallint)
COMMENT '存储每日计数器'
BEGIN
  SET @Table = getDailyCounterTable(inRoleID);
  SET @str1 = CONCAT("SELECT count(roleID) into @Num FROM ", @Table, " WHERE roleID = ", inRoleID, " AND dailyType = ", InDailyType);

  PREPARE stmt1 FROM @str1;
  EXECUTE stmt1;
  DROP PREPARE stmt1;
  IF @Num > 0 THEN
    SET @str2 = CONCAT("UPDATE LOW_PRIORITY ", @Table, " SET counter = ", InCounter, ", lastUpdateTime = ", InlastUpdateTime, " WHERE roleID = ", inRoleID, " AND dailyType = ", InDailyType);
    PREPARE stmt2 FROM @str2;
    EXECUTE stmt2;
    DROP PREPARE stmt2;
  ELSE
    SET @str3 = CONCAT("INSERT INTO ", @Table, " (roleID, dailyType, lastUpdateTime, counter) VALUES (", inRoleID, ",", InDailyType, ",", InlastUpdateTime, ",", InCounter, ")");
    PREPARE stmt3 FROM @str3;
    EXECUTE stmt3;
    DROP PREPARE stmt3;
  END IF;
END
$$

--
-- Definition for procedure saveDenyChatTime
--
DROP PROCEDURE IF EXISTS saveDenyChatTime$$
CREATE PROCEDURE saveDenyChatTime (IN InRoleID bigint UNSIGNED, IN InDenyChatTime bigint)
COMMENT '添加禁言时间'
BEGIN
  UPDATE LOW_PRIORITY base_role
  SET denyChatTime = InDenyChatTime
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure saveEquipBaseProp
--
DROP PROCEDURE IF EXISTS saveEquipBaseProp$$
CREATE PROCEDURE saveEquipBaseProp (IN InEquipUID bigint UNSIGNED,
IN InpropKey1 tinyint UNSIGNED,
IN InpropValue1 double,
IN InpropKey2 tinyint UNSIGNED,
IN InpropValue2 double,
IN InpropKey3 tinyint UNSIGNED,
IN InpropValue3 double,
IN InpropKey4 tinyint UNSIGNED,
IN InpropValue4 double,
IN InpropKey5 tinyint UNSIGNED,
IN InpropValue5 double,
IN InSkillLevel1 tinyint UNSIGNED,
IN InSkillLevel2 tinyint UNSIGNED)
COMMENT '新增或更新装备的附加信息'
BEGIN
  IF NOT EXISTS (SELECT
        equipUID
      FROM equip_base_info
      WHERE equipUID = InEquipUID) THEN
    INSERT DELAYED INTO equip_base_info (equipUID,
    propKey1,
    propValue1,
    propKey2,
    propValue2,
    propKey3,
    propValue3,
    propKey4,
    propValue4,
    propKey5,
    propValue5,
    skillLevel1,
    skillLevel2)
      VALUES (InEquipUID, InpropKey1, InpropValue1, InpropKey2, InpropValue2, InpropKey3, InpropValue3, InpropKey4, InpropValue4, InpropKey5, InpropValue5, InSkillLevel1, InSkillLevel2);
  END IF;
END
$$

--
-- Definition for procedure saveEquipEnBaseValue
--
DROP PROCEDURE IF EXISTS saveEquipEnBaseValue$$
CREATE PROCEDURE saveEquipEnBaseValue (IN InEquipUID bigint UNSIGNED,
IN InpropKey1 tinyint UNSIGNED,
IN InpropValue1 double,
IN InpropKey2 tinyint UNSIGNED,
IN InpropValue2 double,
IN InpropKey3 tinyint UNSIGNED,
IN InpropValue3 double,
IN InpropKey4 tinyint UNSIGNED,
IN InpropValue4 double,
IN InpropKey5 tinyint UNSIGNED,
IN InpropValue5 double)
COMMENT '新增装备强化属性基值'
BEGIN
  IF EXISTS (SELECT
        equipUID
      FROM equip_enhance_info
      WHERE equipUID = InEquipUID) THEN
    UPDATE LOW_PRIORITY equip_enhance_info
    SET propKey1 = InpropKey1,
        propValue1 = InpropValue1,
        propKey2 = InpropKey2,
        propValue2 = InpropValue2,
        propKey3 = InpropKey3,
        propValue3 = InpropValue3,
        propKey4 = InpropKey4,
        propValue4 = InpropValue4,
        propKey5 = InpropKey5,
        propValue5 = InpropValue5
    WHERE equipUID = InEquipUID;
  ELSE
    INSERT DELAYED INTO equip_enhance_info (equipUID,
    propKey1,
    propValue1,
    propKey2,
    propValue2,
    propKey3,
    propValue3,
    propKey4,
    propValue4,
    propKey5,
    propValue5)
      VALUES (InEquipUID, InpropKey1, InpropValue1, InpropKey2, InpropValue2, InpropKey3, InpropValue3, InpropKey4, InpropValue4, InpropKey5, InpropValue5);
  END IF;
END
$$

--
-- Definition for procedure saveEquipExtProp
--
DROP PROCEDURE IF EXISTS saveEquipExtProp$$
CREATE PROCEDURE saveEquipExtProp (IN InEquipUID bigint UNSIGNED, IN InpropKey1 tinyint UNSIGNED, IN InpropValue1 double, IN InpropRecast1 tinyint UNSIGNED, IN InproAffixe1 middleint UNSIGNED, IN IncalcType1 tinyint UNSIGNED, IN InpropKey2 tinyint UNSIGNED, IN InpropValue2 double, IN InpropRecast2 tinyint UNSIGNED, IN InproAffixe2 middleint UNSIGNED, IN IncalcType2 tinyint UNSIGNED, IN InpropKey3 tinyint UNSIGNED, IN InpropValue3 double, IN InpropRecast3 tinyint UNSIGNED, IN InproAffixe3 middleint UNSIGNED, IN IncalcType3 tinyint UNSIGNED, IN InpropKey4 tinyint UNSIGNED, IN InpropValue4 double, IN InpropRecast4 tinyint UNSIGNED, IN InproAffixe4 middleint UNSIGNED, IN IncalcType4 tinyint UNSIGNED, IN InpropKey5 tinyint UNSIGNED, IN InpropValue5 double, IN InpropRecast5 tinyint UNSIGNED, IN InproAffixe5 middleint UNSIGNED, IN IncalcType5 tinyint UNSIGNED, IN InpropKey6 tinyint UNSIGNED, IN InpropValue6 double, IN InpropRecast6 tinyint UNSIGNED, IN InproAffixe6 middleint UNSIGNED, IN IncalcType6 tinyint UNSIGNED)
COMMENT '保存装备的附加属性'
BEGIN
  IF EXISTS (SELECT
        equipUID
      FROM equip_ext_info
      WHERE equipUID = InEquipUID) THEN
    UPDATE LOW_PRIORITY equip_ext_info
    SET propKey1 = InpropKey1,
        propValue1 = InpropValue1,
        propRecast1 = InpropRecast1,
        propAffixe1 = InproAffixe1,
        calcType1 = IncalcType1,
        propKey2 = InpropKey2,
        propValue2 = InpropValue2,
        propRecast2 = InpropRecast2,
        propAffixe2 = InproAffixe2,
        calcType2 = IncalcType2,
        propKey3 = InpropKey3,
        propValue3 = InpropValue3,
        propRecast3 = InpropRecast3,
        propAffixe3 = InproAffixe3,
        calcType3 = IncalcType3,
        propKey4 = InpropKey4,
        propValue4 = InpropValue4,
        propRecast4 = InpropRecast4,
        propAffixe4 = InproAffixe4,
        calcType4 = IncalcType4,
        propKey5 = InpropKey5,
        propValue5 = InpropValue5,
        propRecast5 = InpropRecast5,
        propAffixe5 = InproAffixe5,
        calcType5 = IncalcType5,
        propKey6 = InpropKey6,
        propValue6 = InpropValue6,
        propRecast6 = InpropRecast6,
        propAffixe6 = InproAffixe6,
        calcType6 = IncalcType6
    WHERE equipUID = InEquipUID;
  ELSE
    INSERT DELAYED INTO equip_ext_info (equipUID,
    propKey1,
    propValue1,
    propRecast1,
    propAffixe1,
    calcType1,
    propKey2,
    propValue2,
    propRecast2,
    propAffixe2,
    calcType2,
    propKey3,
    propValue3,
    propRecast3,
    propAffixe3,
    calcType3,
    propKey4,
    propValue4,
    propRecast4,
    propAffixe4,
    calcType4,
    propKey5,
    propValue5,
    propRecast5,
    propAffixe5,
    calcType5,
    propKey6,
    propValue6,
    propRecast6,
    propAffixe6,
    calcType6)
      VALUES (InEquipUID, InpropKey1, InpropValue1, InpropRecast1, InproAffixe1, IncalcType1, InpropKey2, InpropValue2, InpropRecast2, InproAffixe2, IncalcType2, InpropKey3, InpropValue3, InpropRecast3, InproAffixe3, IncalcType3, InpropKey4, InpropValue4, InpropRecast4, InproAffixe4, IncalcType4, InpropKey5, InpropValue5, InpropRecast5, InproAffixe5, IncalcType5, InpropKey6, InpropValue6, InpropRecast6, InproAffixe6, IncalcType6);
  END IF;
END
$$

--
-- Definition for procedure saveFashionSlot
--
DROP PROCEDURE IF EXISTS saveFashionSlot$$
CREATE PROCEDURE saveFashionSlot (IN InRoleID bigint UNSIGNED, IN InSlot tinyint UNSIGNED, IN InFashionID smallint UNSIGNED)
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM fashion_slot
      WHERE roleID = InRoleID AND slot = InSlot) THEN
    UPDATE LOW_PRIORITY fashion_slot
    SET fashionID = InFashionID
    WHERE roleID = InRoleID AND slot = InSlot;
  ELSE
    INSERT DELAYED INTO fashion_slot (roleID, slot, fashionID)
      VALUES (InRoleID, InSlot, InFashionID);
  END IF;
END
$$

--
-- Definition for procedure saveFriend
--
DROP PROCEDURE IF EXISTS saveFriend$$
CREATE PROCEDURE saveFriend (IN inRoleID bigint UNSIGNED,
IN InFriendID bigint UNSIGNED,
IN InRelation tinyint UNSIGNED,
IN inCloseness int UNSIGNED,
IN InlastTimeAddLove bigint UNSIGNED,
IN InlastTimeGiveLuckyCoin bigint UNSIGNED,
IN InlastTimeGainLuckyCoin bigint UNSIGNED)
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM friend_info
      WHERE roleID = inRoleID AND friendRoleID = InFriendID) THEN
    UPDATE LOW_PRIORITY friend_info
    SET friendRoleID = InFriendID,
        relation = InRelation,
        closeness = inCloseness,
        lastTimeAddLove = InlastTimeAddLove,
        lastTimeGiveLuckyCoin = InlastTimeGiveLuckyCoin,
        lastTimeGainLuckyCoin = InlastTimeGainLuckyCoin
    WHERE roleID = inRoleID AND friendRoleID = InFriendID;
  ELSE
    INSERT DELAYED INTO friend_info (roleID, friendRoleID, relation, closeness, lastTimeAddLove, lastTimeGiveLuckyCoin, lastTimeGainLuckyCoin)
      VALUES (inRoleID, InFriendID, InRelation, inCloseness, InlastTimeAddLove, InlastTimeGiveLuckyCoin, InlastTimeGainLuckyCoin);
  END IF;
END
$$

--
-- Definition for procedure saveGuildBattle
--
DROP PROCEDURE IF EXISTS saveGuildBattle$$
CREATE PROCEDURE saveGuildBattle (IN InWeek tinyint, IN InguildID1 bigint, IN InguildName1 char(32), IN InguildID2 bigint, IN InguildName2 char(32), IN Inwin_guildID bigint, IN Inwin_time datetime, IN Inhome_id smallint, IN Innpc_id smallint)
COMMENT '保存军团联赛信息'
BEGIN
  DECLARE OWeek tinyint DEFAULT 0;
  SELECT
    gb.dayweek INTO OWeek
  FROM guild_battle gb
  WHERE gb.dayweek = InWeek;
  IF OWeek > 0 THEN
    UPDATE LOW_PRIORITY guild_battle gb
    SET gb.dayweek = InWeek,
        gb.guildID1 = InguildID1,
        gb.guildName1 = InguildName1,
        gb.guildID2 = InguildID2,
        gb.guildName2 = InguildName2,
        gb.win_guildID = Inwin_guildID,
        gb.win_time = Inwin_time,
        gb.home_id = Inhome_id,
        gb.npc_id = Innpc_id
    WHERE gb.dayweek = InWeek;
  ELSE
    INSERT DELAYED INTO guild_battle (dayweek, guildID1, guildName1, guildID2, guildName2, win_guildID, win_time, home_id, npc_id)
      VALUES (InWeek, InguildID1, InguildName1, InguildID2, InguildName2, Inwin_guildID, Inwin_time, Inhome_id, Innpc_id);
  END IF;
END
$$

--
-- Definition for procedure saveGuildInfo
--
DROP PROCEDURE IF EXISTS saveGuildInfo$$
CREATE PROCEDURE saveGuildInfo (IN InGuildID bigint UNSIGNED, IN InguildName char(32), IN InguildLevel tinyint, IN Inmember int, IN Inresource int, IN Inexper int, IN Innotice varchar(256), IN Inhomeid int, IN InhomeLevel tinyint, IN IncreateTime bigint, IN InmaxOnlineNum int, IN InmaxOnlineTime bigint, IN InlastGuildCopyOverTime bigint)
COMMENT '保存工会主数据'
BEGIN
  IF EXISTS (SELECT
        guildID
      FROM guild
      WHERE guildID = InGuildID) THEN
    UPDATE guild
    SET guildName = InguildName,
        guildLevel = InguildLevel,
        member = Inmember,
        resource = Inresource,
        exper = Inexper,
        notice = Innotice,
        homeid = Inhomeid,
        homeLevel = InhomeLevel,
        maxOnlineNum = InmaxOnlineNum,
        maxOnlineTime = InmaxOnlineTime,
        lastGuildCopyOverTime = InlastGuildCopyOverTime
    WHERE guildID = InGuildID;
  ELSE
    INSERT INTO guild (guildID, guildName, guildLevel, resource, exper, notice, homeid, homeLevel, createTime, maxOnlineNum, maxOnlineTime)
      VALUES (InGuildID, InguildName, InguildLevel, Inresource, Inexper, Innotice, Inhomeid, InhomeLevel, IncreateTime, InmaxOnlineNum, InmaxOnlineTime);
  END IF;
END
$$

--
-- Definition for procedure saveGuildMember
--
DROP PROCEDURE IF EXISTS saveGuildMember$$
CREATE PROCEDURE saveGuildMember (IN inRoleID bigint UNSIGNED, IN InGuildID bigint UNSIGNED, IN InjoinTime bigint, IN InroleGuildLevel tinyint, IN InguildPower int, IN Incontribute int)
COMMENT '保存工会玩家数据，更新或者插入'
BEGIN




  IF EXISTS (SELECT
        roleID
      FROM guild_member
      WHERE roleID = inRoleID) THEN
    UPDATE guild_member
    SET roleGuildLevel = InroleGuildLevel,
        guildPower = InguildPower,
        contribute = Incontribute
    WHERE roleID = inRoleID;
  ELSE
    INSERT INTO guild_member (roleID, guildID, joinTime, roleGuildLevel, guildPower, contribute)
      VALUES (inRoleID, InGuildID, InjoinTime, InroleGuildLevel, InguildPower, Incontribute);
  END IF;

END
$$

--
-- Definition for procedure saveItem
--
DROP PROCEDURE IF EXISTS saveItem$$
CREATE PROCEDURE saveItem (IN inRoleID bigint UNSIGNED,
IN InItemID int UNSIGNED,
IN InItemUID bigint UNSIGNED,
IN InPos mediumint UNSIGNED,
IN InPileNum int UNSIGNED,
IN InRecastCount int UNSIGNED,
IN InIsBind tinyint UNSIGNED,
IN InQuality int UNSIGNED)
BEGIN
  IF InPos = 5 THEN
    UPDATE item
    SET deleteTime = NOW(),
        pos = InPos
    WHERE itemUID = InItemUID;
  ELSE
    IF EXISTS (SELECT
          itemUID
        FROM item
        WHERE itemUID = InItemUID) THEN
      UPDATE LOW_PRIORITY item
      SET pos = InPos,
          pileNum = InPileNum,
          recastCount = InRecastCount,
          isBind = InIsBind,
          quality = InQuality,
          deleteTime = "1970-01-01 00:00:00"
      WHERE itemUID = InItemUID;
    ELSE
      INSERT DELAYED INTO item (roleID, itemID, itemUID, pos, pileNum, recastCount, isBind, quality)
        VALUES (inRoleID, InItemID, InItemUID, InPos, InPileNum, InRecastCount, InIsBind, InQuality);
    END IF;
  END IF;
END
$$

--
-- Definition for procedure saveItemUsedCD
--
DROP PROCEDURE IF EXISTS saveItemUsedCD$$
CREATE PROCEDURE saveItemUsedCD (IN inRoleID bigint UNSIGNED, IN InItemGroupID mediumint UNSIGNED, IN InLastUsedTime bigint)
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM item_used_cd
      WHERE roleID = roleID AND itemGroupID = InItemGroupID) THEN
    UPDATE LOW_PRIORITY item_used_cd
    SET lastUsedTime = InLastUsedTime
    WHERE roleID = roleID AND itemGroupID = InItemGroupID;
  ELSE
    INSERT DELAYED INTO item_used_cd (roleID, itemGroupID, lastUsedTime)
      VALUES (inRoleID, InItemGroupID, InLastUsedTime);
  END IF;
END
$$

--
-- Definition for procedure saveLevel
--
DROP PROCEDURE IF EXISTS saveLevel$$
CREATE PROCEDURE saveLevel (IN InRoleID bigint UNSIGNED, IN curLevel tinyint UNSIGNED, IN curExp int UNSIGNED)
BEGIN
  UPDATE LOW_PRIORITY base_role
  SET `level` = curLevel,
      `exp` = curExp
  WHERE roleID = InRoleID;
END
$$

--
-- Definition for procedure saveMallInfo
--
DROP PROCEDURE IF EXISTS saveMallInfo$$
CREATE PROCEDURE saveMallInfo (IN IndbID bigint UNSIGNED,
IN InitemID int UNSIGNED,
IN Insort int UNSIGNED,
IN Intype tinyint,
IN Intype1 tinyint,
IN Indiamond int,
IN InbindDiamond int,
IN InuseIntegral int,
IN Ingetintegral int,
IN InlimitBuy int,
IN InlimitDay int,
IN InlimitType tinyint,
IN InlimitBeginTime int,
IN InlimitEndTime int,
IN InbuyReset int,
IN Inlevel tinyint,
IN Inrecharge int,
IN InisHide int,
IN InbeginTime int,
IN InendTime int,
IN Inrebate tinyint,
IN InrebateBeginTime int,
IN InrebateEndTime int,
IN InshowType tinyint,
IN InbuySendItem int,
IN InbuySendNum int,
IN InbuySendLimit int,
IN InbuySendBeginTime int,
IN InbuySendEndTime int)
BEGIN
  IF EXISTS (SELECT
        *
      FROM mall
      WHERE dbID = IndbID) THEN
    UPDATE mall
    SET itemID = InitemID,
        sort = Insort,
        type = Intype,
        type1 = Intype1,
        diamond = Indiamond,
        bindDiamond = InbindDiamond,
        useIntegral = InuseIntegral,
        getIntegral = Ingetintegral,
        limitBuy = InlimitBuy,
        limitDay = InlimitDay,
        limitType = InlimitType,
        limitBeginTime = InlimitBeginTime,
        limitEndTime = InlimitEndTime,
        buyReset = InbuyReset,
        level = Inlevel,
        recharge = Inrecharge,
        isHide = InisHide,
        beginTime = InbeginTime,
        endtime = InendTime,
        rebate = Inrebate,
        rebateBeginTime = InrebateBeginTime,
        rebateEndTime = InrebateEndTime,
        showType = InshowType,
        buySendItem = InbuySendItem,
        buySendNum = InbuySendNum,
        buySendLimit = InbuySendLimit,
        buySendBeginTime = InbuySendBeginTime,
        buySendEndTime = InbuySendEndTime
    WHERE dbID = IndbID;
  ELSE
    INSERT INTO mall (dbID, itemID, sort, `type`, type1, diamond, bindDiamond, useIntegral, getIntegral, limitBuy, limitDay, limitType, limitBeginTime, limitEndTime, buyReset, LEVEL, recharge, isHide, beginTime, endTime, rebate, rebateBeginTime, rebateEndTime, showType, buySendItem, buySendNum, buySendLimit, buySendBeginTime, buySendEndTime)
      VALUES (IndbID, InitemID, Insort, Intype, Intype1, Indiamond, InbindDiamond, InuseIntegral, Ingetintegral, InlimitBuy, InlimitDay, InlimitType, InlimitBeginTime, InlimitEndTime, InbuyReset, Inlevel, Inrecharge, InisHide, InbeginTime, InendTime, Inrebate, InrebateBeginTime, InrebateEndTime, InshowType, InbuySendItem, InbuySendNum, InbuySendLimit, InbuySendBeginTime, InbuySendEndTime);
  END IF;
END
$$

--
-- Definition for procedure SaveMallLimitBuyInfo
--
DROP PROCEDURE IF EXISTS SaveMallLimitBuyInfo$$
CREATE PROCEDURE SaveMallLimitBuyInfo (IN IndbID bigint UNSIGNED, IN InitemID int UNSIGNED, IN InroldID bigint UNSIGNED, IN InhaveBuy int, IN Intime int)
BEGIN
  INSERT INTO malllimitbuy (dbID, itemId, roleId, haveBuy, `time`)
    VALUES (IndbID, InitemID, InroldID, InhaveBuy, Intime);
END
$$

--
-- Definition for procedure savePackageInfo
--
DROP PROCEDURE IF EXISTS savePackageInfo$$
CREATE PROCEDURE savePackageInfo (IN inRoleID bigint UNSIGNED, IN InBagType tinyint UNSIGNED, IN InMaxSlot mediumint UNSIGNED)
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM package_info
      WHERE roleID = inRoleID AND bagType = InBagType) THEN
    UPDATE LOW_PRIORITY package_info
    SET bagType = InBagType,
        maxSlot = InMaxSlot
    WHERE roleID = inRoleID AND bagType = InBagType;
  ELSE
    INSERT DELAYED INTO package_info (roleID, bagType, maxSlot)
      VALUES (inRoleID, InBagType, InMaxSlot);
  END IF;
END
$$

--
-- Definition for procedure savePersonalityInfo
--
DROP PROCEDURE IF EXISTS savePersonalityInfo$$
CREATE PROCEDURE savePersonalityInfo (IN InRoleID bigint UNSIGNED,
IN InPhotoData mediumblob,
IN InPraiseNum int,
IN InBirthday varchar(30),
IN InLocation varchar(57),
IN InStarSign varchar(24),
IN InSign varchar(144),
IN InTags text,
IN InImpressions text,
IN InforbiddenTime bigint UNSIGNED)
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM personality_info
      WHERE roleID = InRoleID) THEN
    UPDATE LOW_PRIORITY personality_info
    SET photoData = InPhotoData,
        praiseNum = InPraiseNum,
        birthday = InBirthday,
        location = InLocation,
        starSign = InStarSign,
        `sign` = InSign,
        tags = InTags,
        impressions = InImpressions,
        forbiddenTime = InforbiddenTime
    WHERE roleID = InRoleID;
  ELSE
    INSERT DELAYED INTO personality_info (roleID, photoData, praiseNum, birthday, location, starSign, `sign`, tags, impressions, forbiddenTime)
      VALUES (InRoleID, InPhotoData, InPraiseNum, InBirthday, InLocation, InStarSign, InSign, InTags, InImpressions, InforbiddenTime);
  END IF;
END
$$

--
-- Definition for procedure savePet
--
DROP PROCEDURE IF EXISTS savePet$$
CREATE PROCEDURE savePet (IN inRoleID bigint UNSIGNED, IN InPetID int UNSIGNED, IN InStar tinyint UNSIGNED, IN InStatus tinyint, IN InName varchar(20), IN InForce bigint UNSIGNED)
COMMENT '保存宠物信息'
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM pet_info
      WHERE roleID = InRoleID AND petID = InPetID) THEN
    UPDATE LOW_PRIORITY pet_info
    SET star = InStar,
        status = InStatus,
        name = InName,
        `force` = InForce
    WHERE roleID = InRoleID AND petID = InPetID;
  ELSE
    INSERT DELAYED INTO pet_info (roleID, petID, star, status, name, `force`)
      VALUES (InRoleID, InPetID, InStar, InStatus, InName, InForce);
  END IF;
END
$$

--
-- Definition for procedure savePetEquip
--
DROP PROCEDURE IF EXISTS savePetEquip$$
CREATE PROCEDURE savePetEquip (IN InRoleID bigint UNSIGNED, IN InEquipPos tinyint UNSIGNED, IN InEquipID tinyint UNSIGNED, IN InEquipLv tinyint UNSIGNED)
COMMENT '保存宠物装备'
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM pet_equip
      WHERE roleID = InRoleID AND equipPos = InEquipPos) THEN
    UPDATE LOW_PRIORITY pet_equip
    SET equipID = InEquipID,
        equipLv = InEquipLv
    WHERE roleID = InRoleID AND equipPos = InEquipPos;
  ELSE
    INSERT DELAYED INTO pet_equip (roleID, equipPos, equipID, equipLv)
      VALUES (InRoleID, InEquipPos, InEquipID, InEquipLv);
  END IF;
END
$$

--
-- Definition for procedure savePetSkill
--
DROP PROCEDURE IF EXISTS savePetSkill$$
CREATE PROCEDURE savePetSkill (IN inRoleID bigint UNSIGNED,
IN InPetID int UNSIGNED,
IN InSkillID int UNSIGNED,
IN InIndex tinyint UNSIGNED,
IN InLevel tinyint UNSIGNED,
IN InUnLock tinyint UNSIGNED,
IN InType tinyint UNSIGNED,
IN InCd bigint)
COMMENT '保存宠物技能信息'
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM pet_skill
      WHERE roleID = InRoleID AND petID = InPetID AND `index` = InIndex) THEN
    UPDATE LOW_PRIORITY pet_skill
    SET skillID = InSkillID,
        level = InLevel,
        type = InType,
        `unlock` = InUnLock,
        cd = InCd
    WHERE roleID = InRoleID AND petID = InPetID AND `index` = InIndex;
  ELSE
    INSERT DELAYED INTO pet_skill (roleID, petID, skillID, `index`, level, `unlock`, type, cd)
      VALUES (inRoleID, InPetID, InSkillID, InIndex, InLevel, InUnLock, InType, InCd);
  END IF;
END
$$

--
-- Definition for procedure savePlayerClock
--
DROP PROCEDURE IF EXISTS savePlayerClock$$
CREATE PROCEDURE savePlayerClock (IN InRoleID bigint UNSIGNED, IN Inclocktype bigint UNSIGNED, IN Inofftime tinyint, IN Instarttime datetime, IN Inlasttime datetime, IN Inlengthtime int, IN Inpasstime int)
COMMENT '保存玩家时钟数据'
BEGIN

  DECLARE RID bigint DEFAULT 0;
  SELECT
    pc.roleID INTO RID
  FROM player_clock pc
  WHERE pc.roleID = InRoleID AND pc.clockType = Inclocktype;
  IF RID > 0 THEN

    UPDATE LOW_PRIORITY player_clock pc
    SET pc.offTime = Inofftime,
        pc.startTime = Instarttime,
        pc.lastTime = Inlasttime,
        pc.lengthTime = Inlengthtime,
        pc.passTime = Inpasstime
    WHERE pc.roleID = InRoleID AND pc.clockType = Inclocktype;
  ELSE

    INSERT DELAYED INTO player_clock (roleID, clockType, offTime, startTime, lastTime, lengthTime, passTime)
      VALUES (InRoleID, Inclocktype, Inofftime, Instarttime, Inlasttime, Inlengthtime, Inpasstime);
  END IF;
END
$$

--
-- Definition for procedure savePlayerProp
--
DROP PROCEDURE IF EXISTS savePlayerProp$$
CREATE PROCEDURE savePlayerProp (IN InRoleID bigint UNSIGNED, IN InPropIndex smallint UNSIGNED, IN InPropValue text)
COMMENT '通用保存玩家属性'
BEGIN

  DECLARE RID bigint DEFAULT 0;
  SELECT
    pp.roleID INTO RID
  FROM player_prop pp
  WHERE pp.roleID = InRoleID AND pp.propIndex = InPropIndex;
  IF RID > 0 THEN

    UPDATE LOW_PRIORITY player_prop pp
    SET pp.propValue = InPropValue
    WHERE pp.roleID = InRoleID AND pp.propIndex = InPropIndex;
  ELSE

    INSERT DELAYED INTO player_prop (roleID, propIndex, propValue)
      VALUES (InRoleID, InPropIndex, InPropValue);
  END IF;
END
$$

--
-- Definition for procedure saveRankData
--
DROP PROCEDURE IF EXISTS saveRankData$$
CREATE PROCEDURE saveRankData (IN InroleID bigint UNSIGNED, IN InrankType tinyint UNSIGNED, IN InrankSort smallint UNSIGNED, IN InrankSortC smallint, IN Invalue1 bigint, IN Invalue2 bigint, IN Invalue3 bigint, IN IncreateTime datetime)
COMMENT '保存排行榜数据'
BEGIN
  DECLARE RID bigint DEFAULT 0;
  SELECT
    pr.roleID INTO RID
  FROM player_rank pr
  WHERE pr.rankType = InrankType AND pr.rankSort = InrankSort;
  IF RID > 0 THEN

    UPDATE player_rank pr
    SET pr.roleID = InroleID,
        pr.rankSortC = InrankSortC,
        pr.value1 = Invalue1,
        pr.value2 = Invalue2,
        pr.value3 = Invalue3,
        pr.createTime = IncreateTime
    WHERE pr.rankType = InrankType AND pr.rankSort = InrankSort;
  ELSE

    INSERT INTO player_rank (roleID, rankType, rankSort, rankSortC, value1, value2, value3, createTime)
      VALUES (InroleID, InrankType, InrankSort, InrankSortC, Invalue1, Invalue2, Invalue3, IncreateTime);
  END IF;
END
$$

--
-- Definition for procedure saveRefine
--
DROP PROCEDURE IF EXISTS saveRefine$$
CREATE PROCEDURE saveRefine (IN `InRoleID` bigint UNSIGNED, IN `InType` tinyint UNSIGNED, IN `InLevel` tinyint UNSIGNED)
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM equip_refine_info
      WHERE roleID = InRoleID AND type = InType) THEN
    UPDATE LOW_PRIORITY equip_refine_info
    SET level = InLevel
    WHERE roleID = InRoleID AND type = InType;
  ELSE
    INSERT DELAYED INTO equip_refine_info (roleID, type, level)
      VALUES (InRoleID, InType, InLevel);
  END IF;

END
$$

--
-- Definition for procedure saveRoleBase
--
DROP PROCEDURE IF EXISTS saveRoleBase$$
CREATE PROCEDURE saveRoleBase (IN InRoleID bigint UNSIGNED,
IN InLevel tinyint UNSIGNED,
IN InExp int UNSIGNED,
IN InHp int UNSIGNED,
IN InMp int UNSIGNED,
IN InMapID smallint UNSIGNED,
IN InX float,
IN InY float,
IN InOldMapID smallint UNSIGNED,
IN InOldX float,
IN InOldY float,
IN InGold int,
IN InBindGold int,
IN InDiamond int,
IN InBindDiamond int,
IN InPrestige int,
IN InAchieve int, IN Inreputation int,
IN InHonor int,
IN InPurpleEssence int,
IN InGoldenEssence int,
IN InPkMode tinyint,
IN inScore int,
IN inPredatorCoin int,
IN inLastTransferMapTime int)
BEGIN
  UPDATE LOW_PRIORITY base_role
  SET level = InLevel,
      exp = InExp,
      hp = InHp,
      mp = InMp,
      mapID = InMapID,
      x = InX,
      y = InY,
      oldMapID = InOldMapID,
      oldX = InOldX,
      oldY = InOldY,
      gold = InGold,
      bindGold = InBindGold,
      diamond = InDiamond,
      bindDiamond = InBindDiamond,
      prestige = InPrestige,
      achieve = InAchieve,
      reputation = Inreputation,
      honor = InHonor,
      purpleEssence = InPurpleEssence,
      goldenEssence = InGoldenEssence,
      pkMode = InPkMode,
      scoreCoin = inScore,
      predatorCoin = inPredatorCoin,
      lastTransferMapTime = inLastTransferMapTime
  WHERE roleID = InRoleID AND deleteTime = '1970-01-01 00:00:00';
END
$$

--
-- Definition for procedure saveRoleExt
--
DROP PROCEDURE IF EXISTS saveRoleExt$$
CREATE PROCEDURE saveRoleExt (IN InRoleID bigint UNSIGNED, IN IntotalOffTime bigint UNSIGNED,
IN IncanRename tinytext, IN InupdateReward text)
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM ext_role
      WHERE roleID = InRoleID) THEN

    UPDATE ext_role
    SET totalOfflineTime = IntotalOffTime,
        canRename = IncanRename,
        updateReward = InupdateReward
    WHERE roleID = InRoleID;
  ELSE

    INSERT DELAYED INTO ext_role (roleID, totalOfflineTime, canRename, updateReward)
      VALUE (InRoleID, IntotalOffTime, IncanRename, InupdateReward);
  END IF;

END
$$

--
-- Definition for procedure saveRoleFashion
--
DROP PROCEDURE IF EXISTS saveRoleFashion$$
CREATE PROCEDURE saveRoleFashion (IN InRoleID bigint UNSIGNED, IN InFashionID int UNSIGNED, IN InExpiresSecond int UNSIGNED)
BEGIN

  DECLARE dataEndTime int UNSIGNED;
  SELECT
    endtime INTO dataEndTime
  FROM role_fashions
  WHERE roleID = InRoleID AND fashionID = InFashionID;

  IF dataEndTime >= UNIX_TIMESTAMP() THEN

    UPDATE role_fashions
    SET endtime = endtime + InExpiresSecond
    WHERE roleID = InRoleID AND fashionID = InFashionID;
  ELSEIF dataEndTime > 0 THEN

    UPDATE role_fashions
    SET endtime = UNIX_TIMESTAMP() + InExpiresSecond
    WHERE roleID = InRoleID AND fashionID = InFashionID;
  ELSE
    INSERT INTO role_fashions (roleID, fashionID, endtime)
      VALUES (InRoleID, InFashionID, UNIX_TIMESTAMP() + InExpiresSecond);
  END IF;

END
$$

--
-- Definition for procedure saveRoleLoginTime
--
DROP PROCEDURE IF EXISTS saveRoleLoginTime$$
CREATE PROCEDURE saveRoleLoginTime (IN InLoginType int, IN InRoleID bigint UNSIGNED, IN InNowTime datetime)
COMMENT '保存角色登陆登出时间'
BEGIN

  DECLARE DiffTime bigint;
  DECLARE OldLoginTime datetime;
  DECLARE OldOnlineTime bigint;

  IF InLoginType = 1 THEN

    UPDATE base_role
    SET lastLoginTime = InNowTime,
        isOnline = 1
    WHERE roleID = InRoleID;
  ELSEIF InLoginType = 0 THEN

    SELECT
      lastLoginTime,
      totalOnlineTime INTO OldLoginTime, OldOnlineTime
    FROM base_role
    WHERE roleID = InRoleID;


    SET DiffTime = TIMESTAMPDIFF(SECOND, OldLoginTime, InNowTime);

    UPDATE base_role
    SET lastLogoutTime = InNowTime,
        isOnline = 0,
        totalOnlineTime = DiffTime + OldOnlineTime
    WHERE roleID = InRoleID;
  END IF;
END
$$

--
-- Definition for procedure saveSkill
--
DROP PROCEDURE IF EXISTS saveSkill$$
CREATE PROCEDURE saveSkill (IN InRoleID bigint UNSIGNED,
IN InSkillID middleint UNSIGNED,
IN InSkillLevel tinyint UNSIGNED,
IN InLastUseTime bigint)
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM skill
      WHERE roleID = InRoleID AND skillID = InSkillID) THEN
    UPDATE LOW_PRIORITY skill
    SET level = InSkillLevel,
        lastUseTime = InLastUseTime
    WHERE roleID = InRoleID AND skillID = InSkillID;
  ELSE
    INSERT DELAYED INTO skill (roleID, skillID, level, lastUseTime)
      VALUE (InRoleID, InSkillID, InSkillLevel, InLastUseTime);
  END IF;
END
$$

--
-- Definition for procedure saveSkillSlot
--
DROP PROCEDURE IF EXISTS saveSkillSlot$$
CREATE PROCEDURE saveSkillSlot (IN inRoleID bigint UNSIGNED, IN InSlot tinyint UNSIGNED, IN InSkillID middleint UNSIGNED)
COMMENT '保存角色选择的技能所放的技能插槽'
BEGIN
  IF EXISTS (SELECT
        roleID
      FROM skill_slot
      WHERE roleID = inRoleID AND slot = InSlot) THEN
    UPDATE LOW_PRIORITY skill_slot
    SET skillID = InSkillID
    WHERE roleID = inRoleID AND slot = InSlot;
  ELSE
    INSERT DELAYED INTO skill_slot (roleID, slot, skillID)
      VALUES (inRoleID, InSlot, InSkillID);
  END IF;
END
$$

--
-- Definition for procedure saveSubmittedTask
--
DROP PROCEDURE IF EXISTS saveSubmittedTask$$
CREATE PROCEDURE saveSubmittedTask (IN InRoleID bigint UNSIGNED, IN InTaskSlot smallint UNSIGNED, IN InTaskFlag bigint UNSIGNED)
BEGIN

  IF EXISTS (SELECT
        roleID
      FROM task_submitted
      WHERE roleID = InRoleID AND taskSlot = InTaskSlot) THEN

    UPDATE LOW_PRIORITY task_submitted
    SET taskFlag = InTaskFlag
    WHERE roleID = InRoleID AND taskSlot = InTaskSlot;

  ELSE

    INSERT DELAYED INTO task_submitted (roleID, taskSlot, taskFlag)
      VALUES (InRoleID, InTaskSlot, InTaskFlag);

  END IF;
END
$$

--
-- Definition for procedure saveTeamInfo
--
DROP PROCEDURE IF EXISTS saveTeamInfo$$
CREATE PROCEDURE saveTeamInfo (IN inTeamID bigint UNSIGNED, IN inType tinyint UNSIGNED,
IN inLeaderID bigint UNSIGNED, IN inMembers text, IN inCustomProp text)
BEGIN
  IF EXISTS (SELECT
        teamID
      FROM team
      WHERE teamID = inTeamID) THEN

    UPDATE team
    SET leaderID = inLeaderID,
        members = inMembers,
        customProp = inCustomProp
    WHERE teamID = inTeamID;
  ELSE

    INSERT DELAYED INTO team (teamID, `type`, leaderID, members, customProp)
      VALUES (inTeamID, inType, inLeaderID, inMembers, inCustomProp);
  END IF;
END
$$

--
-- Definition for procedure saveTitleInfo
--
DROP PROCEDURE IF EXISTS saveTitleInfo$$
CREATE PROCEDURE saveTitleInfo (IN InRoleID bigint UNSIGNED, IN InTitleID smallint UNSIGNED)
COMMENT '保存已获取的称号信息'
BEGIN
  IF NOT EXISTS (SELECT
        roleID
      FROM title
      WHERE roleID = InRoleID AND titleID = InTitleID) THEN
    INSERT DELAYED INTO title (roleID, titleID)
      VALUES (InRoleID, InTitleID);
  END IF;
END
$$

--
-- Definition for procedure saveTrade
--
DROP PROCEDURE IF EXISTS saveTrade$$
CREATE PROCEDURE saveTrade (IN InorderID bigint UNSIGNED, IN InsrcItemID bigint UNSIGNED, IN inRoleID bigint UNSIGNED, IN InsellType tinyint, IN InputTime datetime, IN IndownTime datetime,
IN Insilver int UNSIGNED, IN InGold int UNSIGNED, IN IndestRoleID bigint, IN InsellState tinyint, IN InrelateRoleID bigint, IN InItemID int UNSIGNED, IN InQuality tinyint)
COMMENT '保存交易行数据'
BEGIN
  IF EXISTS (SELECT
        orderID
      FROM trade
      WHERE orderID = InorderID) THEN
    UPDATE trade
    SET sellType = InsellType,
        putTime = InputTime,
        downTime = IndownTime,
        silver = Insilver,
        gold = InGold,
        destRoleID = IndestRoleID,
        sellState = InsellState,
        relateRoleID = InrelateRoleID,
        itemID = InItemID,
        quality = InQuality
    WHERE orderID = InorderID;
  ELSE
    INSERT INTO trade (orderID, itemUID, roleID, sellType, putTime, downTime, silver, gold, destRoleID, sellState, relateRoleID, itemID, quality)
      VALUES (InorderID, InsrcItemID, inRoleID, InsellType, InputTime, IndownTime, Insilver, InGold, IndestRoleID, InsellState, InrelateRoleID, InItemID, InQuality);
  END IF;
END
$$

--
-- Definition for procedure saveVariant
--
DROP PROCEDURE IF EXISTS saveVariant$$
CREATE PROCEDURE saveVariant (IN InRoleID bigint UNSIGNED, IN InSetIndex int UNSIGNED, IN InSetValue bigint UNSIGNED)
COMMENT '保存玩家设置数据'
BEGIN
  SET @Table = getVariantTable(InRoleID);
  SET @str1 = CONCAT("SELECT count(roleID) into @Num FROM ", @Table, " WHERE roleID = ", InRoleID, " AND `index` = ", InSetIndex);
  PREPARE stmt1 FROM @str1;
  EXECUTE stmt1;
  DROP PREPARE stmt1;
  IF @Num > 0 THEN
    SET @str2 = CONCAT("UPDATE LOW_PRIORITY ", @Table, " SET `value` = ", InSetValue, " WHERE roleID = ", InRoleID, " AND `index` = ", InSetIndex);
    PREPARE stmt2 FROM @str2;
    EXECUTE stmt2;
    DROP PREPARE stmt2;
  ELSE
    SET @str3 = CONCAT("INSERT INTO ", @Table, " (roleID, `index`, `value`) VALUES (", InRoleID, ",", InSetIndex, ",", InSetValue, ")");
    PREPARE stmt3 FROM @str3;
    EXECUTE stmt3;
    DROP PREPARE stmt3;
  END IF;
END
$$

--
-- Definition for procedure setAccountLastDeviceID
--
DROP PROCEDURE IF EXISTS setAccountLastDeviceID$$
CREATE PROCEDURE setAccountLastDeviceID (IN InAccountID bigint UNSIGNED, IN InDeviceID varchar(255))
BEGIN

  UPDATE account
  SET deviceId = InDeviceID
  WHERE accountID = InAccountID;
END
$$

--
-- Definition for procedure setAccountLoginInfo
--
DROP PROCEDURE IF EXISTS setAccountLoginInfo$$
CREATE PROCEDURE setAccountLoginInfo (IN InBehavor smallint UNSIGNED, IN InAccountID bigint UNSIGNED, IN InOnlineServer int UNSIGNED)
BEGIN

  IF InBehavor = 1 THEN
    UPDATE account
    SET onlineServer = InOnlineServer,
        lastLoginTime = NOW()
    WHERE accountID = InAccountID;
  ELSEIF InBehavor = 2 AND InOnlineServer = 0 THEN
    UPDATE account
    SET lastLogoutTime = NOW(),
        onlineServer = InOnlineServer
    WHERE accountID = InAccountID;
  ELSEIF InBehavor = 3 AND InOnlineServer = 0 THEN
    UPDATE account
    SET onlineServer = InOnlineServer
    WHERE accountID = InAccountID;
  END IF;
END
$$

--
-- Definition for procedure setBindPhoneNum
--
DROP PROCEDURE IF EXISTS setBindPhoneNum$$
CREATE PROCEDURE setBindPhoneNum (IN inAccountID bigint UNSIGNED, IN inBindPhoneNum bigint UNSIGNED)
BEGIN
  UPDATE LOW_PRIORITY account
  SET bindPhoneNum = inBindPhoneNum
  WHERE accountID = inAccountID;
END
$$

--
-- Definition for procedure setGMAccount
--
DROP PROCEDURE IF EXISTS setGMAccount$$
CREATE PROCEDURE setGMAccount (inAIDList text, inGmLevel tinyint UNSIGNED)
COMMENT '设置帐号为gm'
BEGIN

  UPDATE account
  SET gmLevel = inGmLevel
  WHERE FIND_IN_SET(accountID, inAIDList);
END
$$

--
-- Definition for procedure setRechargeRebateConf
--
DROP PROCEDURE IF EXISTS setRechargeRebateConf$$
CREATE PROCEDURE setRechargeRebateConf (IN InId int UNSIGNED,
IN InType int UNSIGNED,
IN InrebateId int UNSIGNED,
IN InbeginTime int UNSIGNED,
IN InendTime int UNSIGNED,
IN InArg1 text,
IN InArg2 text,
IN InArg3 text,
IN InArg4 text,
IN InArg5 text,
IN InArg6 text,
IN InArg7 text)
COMMENT '记录充值活动配置'
BEGIN
  REPLACE INTO recharge_rebate (
  id, `type`, rebateId, beginTime, endTime, arg1, arg2, arg3, arg4, arg5, arg6, arg7
  )
  VALUES (
  InId, InType, InrebateId, InbeginTime, InendTime, InArg1, InArg2, InArg3, InArg4, InArg5, InArg6, InArg7
  );
END
$$

--
-- Definition for procedure setRechargeRebateTaken
--
DROP PROCEDURE IF EXISTS setRechargeRebateTaken$$
CREATE PROCEDURE setRechargeRebateTaken (IN InRoleID bigint UNSIGNED,
IN InrebateIdAndType int UNSIGNED)
COMMENT '记录已经领取了的活动id与角色id'
BEGIN
  INSERT INTO recharge_rebate_taken (roleID, rebateIdAndType)
    VALUES (InRoleID, InrebateIdAndType);
END
$$

--
-- Definition for procedure setRoleDelFlag
--
DROP PROCEDURE IF EXISTS setRoleDelFlag$$
CREATE PROCEDURE setRoleDelFlag (inOperat tinyint, inPlayerIDListStr text)
COMMENT '设置、取消角色删除标志'
BEGIN

  IF inOperat = 1 THEN
    UPDATE base_role
    SET deleteTime = NOW()
    WHERE FIND_IN_SET(roleID, inPlayerIDListStr);
  ELSEIF inOperat = 0 THEN
    UPDATE base_role
    SET deleteTime = "1970-01-01 00:00:00"
    WHERE FIND_IN_SET(roleID, inPlayerIDListStr);
  END IF;
END
$$

--
-- Definition for procedure setTeamID
--
DROP PROCEDURE IF EXISTS setTeamID$$
CREATE PROCEDURE setTeamID (IN InRoleID bigint UNSIGNED, IN InTeamID bigint UNSIGNED, IN InType int UNSIGNED)
BEGIN

  IF EXISTS (SELECT
        teamID
      FROM player_team
      WHERE roleID = InRoleID AND `type` = InType) THEN

    UPDATE player_team
    SET teamID = InTeamID
    WHERE roleID = InRoleID AND `type` = InType;
  ELSE

    INSERT DELAYED INTO player_team (roleID, `type`, teamID)
      VALUES (InRoleID, InType, InTeamID);
  END IF;
END
$$

--
-- Definition for procedure updateMail
--
DROP PROCEDURE IF EXISTS updateMail$$
CREATE PROCEDURE updateMail (IN InMailID bigint UNSIGNED, IN InIsLocked boolean, IN InReadTime datetime, IN InDeleteTime datetime)
BEGIN
  UPDATE mail
  SET isLocked = InIsLocked,
      mailReadTime = InReadTime,
      deleteTime = InDeleteTime
  WHERE mailID = InMailID;
END
$$

--
-- Definition for procedure updateMaxUID
--
DROP PROCEDURE IF EXISTS updateMaxUID$$
CREATE PROCEDURE updateMaxUID (IN InnowUid bigint UNSIGNED)
COMMENT '更新唯一ID'
BEGIN
  DECLARE NValueOld bigint DEFAULT 0;
  DECLARE NValue bigint DEFAULT 0;
  DECLARE NType tinyint DEFAULT 0;
  DECLARE NGSID tinyint DEFAULT 0;










  SET NValue = (InnowUid & 0x1FFFFFF);
  SET NType = (InnowUid >> 57) & 0x3F;
  SET NGSID = (InnowUid >> 43) & 0x3;

  SELECT
    nowValue INTO NValueOld
  FROM uid_info
  WHERE uidType = NType AND gsID = NGSID;
  IF NValue > NValueOld THEN

    UPDATE uid_info
    SET nowValue = NValue,
        nowUID = InnowUid
    WHERE uidType = NType AND gsID = NGSID;
  END IF;
END
$$

--
-- Definition for procedure xmlNoticeAdd
--
DROP PROCEDURE IF EXISTS xmlNoticeAdd$$
CREATE PROCEDURE xmlNoticeAdd (IN InType tinyint, IN inXmlContent text, IN inMd5 char(32))
BEGIN
  IF EXISTS (SELECT
        type
      FROM xml_notice
      WHERE type = InType) THEN
    UPDATE xml_notice
    SET content = inXmlContent,
        `md5` = inMd5
    WHERE type = InType;
  ELSE
    INSERT INTO xml_notice (`type`, content, `md5`)
      VALUES (InType, inXmlContent, inMd5);
  END IF;
END
$$

--
-- Definition for procedure xmlNoticSel
--
DROP PROCEDURE IF EXISTS xmlNoticSel$$
CREATE PROCEDURE xmlNoticSel ()
BEGIN
  SELECT
    *
  FROM xml_notice xn;
END
$$

--
-- Definition for function getDailyCounterTable
--
DROP FUNCTION IF EXISTS getDailyCounterTable$$
CREATE FUNCTION getDailyCounterTable (roleID bigint)
RETURNS varchar(255) charset utf8
BEGIN
  SET @N = roleID % 10;
  RETURN CONCAT("daily_counter", @N);
END
$$

--
-- Definition for function getRealPlatfromName
--
DROP FUNCTION IF EXISTS getRealPlatfromName$$
CREATE FUNCTION getRealPlatfromName (InPlatformName char(50))
RETURNS char(50) charset utf8
COMMENT '根据平台ID返回真实的平台ID'
BEGIN
  DECLARE ReturnPlatformName char(50) DEFAULT InPlatformName;





  SELECT
    targetPlatformName INTO ReturnPlatformName
  FROM platform
  WHERE platformName = InPlatformName;
  RETURN ReturnPlatformName;
END
$$

--
-- Definition for function getVariantTable
--
DROP FUNCTION IF EXISTS getVariantTable$$
CREATE FUNCTION getVariantTable (roleID bigint)
RETURNS varchar(255) charset utf8
BEGIN
  SET @N = roleID % 10;
  RETURN CONCAT("variant", @N);
END
$$

--
-- Definition for function makeBaseAccountID
--
DROP FUNCTION IF EXISTS makeBaseAccountID$$
CREATE FUNCTION makeBaseAccountID (GameServerID tinyint, PlatformID tinyint)
RETURNS bigint(11)
COMMENT '生成账号ID'
BEGIN
  SET @dbID = (SELECT
      dbID
    FROM db_info LIMIT 1);

  IF ISNULL(@dbID) THEN
    RETURN 0;
  END IF;

  SET @Type = 1;


  SET @dbID = @dbID & ((1 << 14) - 1);

  SET @Code = (@Type << 61) | (PlatformID << 50) | (@dbID << 37) | (GameServerID << 32);
  RETURN @Code;
END
$$

--
-- Definition for function makeBaseRoleID
--
DROP FUNCTION IF EXISTS makeBaseRoleID$$
CREATE FUNCTION makeBaseRoleID (GameServerID tinyint)
RETURNS bigint(11)
COMMENT '生成角色ID'
BEGIN
  SET @dbID = (SELECT
      dbID
    FROM db_info LIMIT 1);

  IF ISNULL(@dbID) THEN
    RETURN 0;
  END IF;

  SET @Type = 2;


  SET @dbID = @dbID & ((1 << 14) - 1);

  SET @Code = (@Type << 61) | (@dbID << 40) | (GameServerID << 35);
  RETURN @Code;
END
$$

DELIMITER ;